{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\_containers\\\\Recent\\\\Recent.tsx\";\nimport React, { Component, Fragment } from 'react';\nimport Loader from '../../UI/Loader/Loader';\nimport RecentList from '../../RecentList/RecentList';\nimport ImageService from '../../../helper/image/ImageService';\nconst NB_IMAGE_PER_FETCH = 5;\nconst MIN_TIME_BETWEEN_FETCH = 500;\n\nclass Recent extends Component {\n  constructor(props = null) {\n    super(props);\n    this.state = {\n      images: [],\n      error: false,\n      loading: false,\n      errorMessage: '',\n      nbImagesLoaded: 0\n    };\n    this.fetchImages = this.fetchImages.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  // TODO: When fetching new images => set loading to true\n  // TODO: Can load new image every second\n  async fetchImages() {\n    if (this.state.loading) {\n      return;\n    }\n\n    const imageService = new ImageService();\n\n    try {\n      this.setState({\n        loading: true\n      });\n      const {\n        nbImagesLoaded,\n        images\n      } = this.state;\n      const newImages = await imageService.getKImagesFromOffset(NB_IMAGE_PER_FETCH, nbImagesLoaded);\n      this.setState({\n        loading: false,\n        error: false,\n        images: [...images, ...newImages],\n        nbImagesLoaded: nbImagesLoaded + newImages.length\n      });\n    } catch (e) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  handleScroll() {\n    const scrollYBottom = Math.round(window.scrollY + window.innerHeight);\n    const pageHeight = document.body.scrollHeight;\n    const offsetThreshold = 50;\n\n    if (scrollYBottom > pageHeight - offsetThreshold) {\n      this.fetchImages();\n    }\n  }\n\n  componentDidMount() {\n    this.fetchImages();\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(RecentList, {\n      images: this.state.images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), this.state.loading && React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Recent;","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/_containers/Recent/Recent.tsx"],"names":["React","Component","Fragment","Loader","RecentList","ImageService","NB_IMAGE_PER_FETCH","MIN_TIME_BETWEEN_FETCH","Recent","constructor","props","state","images","error","loading","errorMessage","nbImagesLoaded","fetchImages","bind","handleScroll","imageService","setState","newImages","getKImagesFromOffset","length","e","message","scrollYBottom","Math","round","window","scrollY","innerHeight","pageHeight","document","body","scrollHeight","offsetThreshold","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport Loader from '../../UI/Loader/Loader';\r\nimport Image from '../../../helper/image/Image';\r\nimport RecentList from '../../RecentList/RecentList';\r\nimport ImageService from '../../../helper/image/ImageService';\r\n\r\ninterface RecentState {\r\n    images: Image[];\r\n    error: boolean;\r\n    loading: boolean;\r\n    errorMessage: string;\r\n    nbImagesLoaded: number;\r\n}\r\n\r\nconst NB_IMAGE_PER_FETCH: number = 5;\r\nconst MIN_TIME_BETWEEN_FETCH: number = 500;\r\n\r\nclass Recent extends Component<null, RecentState> {\r\n    constructor(props = null) {\r\n        super(props)\r\n        this.fetchImages = this.fetchImages.bind(this);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n\r\n    state = {\r\n        images: [],\r\n        error: false,\r\n        loading: false,\r\n        errorMessage: '',\r\n        nbImagesLoaded: 0,\r\n    }\r\n\r\n\r\n    // TODO: When fetching new images => set loading to true\r\n    // TODO: Can load new image every second\r\n    async fetchImages() {\r\n        if (this.state.loading) {\r\n            return;\r\n        }\r\n\r\n        const imageService = new ImageService();\r\n        try {\r\n            this.setState({ loading: true });\r\n            const { nbImagesLoaded, images } = this.state;\r\n            const newImages: Image[] = await imageService.getKImagesFromOffset(NB_IMAGE_PER_FETCH, nbImagesLoaded);\r\n\r\n            this.setState({ \r\n                loading: false, \r\n                error: false,\r\n                images: [...images, ...newImages], \r\n                nbImagesLoaded: nbImagesLoaded + newImages.length \r\n            });\r\n\r\n        } catch (e) {\r\n            this.setState({ loading: false, error: true, errorMessage: e.message});\r\n        }\r\n    }\r\n\r\n    handleScroll() {\r\n        const scrollYBottom = Math.round(window.scrollY + window.innerHeight);\r\n        const pageHeight = document.body.scrollHeight;\r\n        const offsetThreshold = 50;\r\n\r\n        if (scrollYBottom > pageHeight - offsetThreshold) {\r\n            this.fetchImages();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchImages();\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    componentWillUnmount() {   \r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <RecentList images={this.state.images} />\r\n                { this.state.loading && (\r\n                    <Loader />\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Recent;"]},"metadata":{},"sourceType":"module"}