{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\reusable\\\\form\\\\text-field\\\\TextField.tsx\";\n// Style\nimport { StyledInput } from './text-input-style';\nimport { StyledTextArea } from './text-area-style';\nimport { Margin, MarginTop, Block, MarginLeft } from '../../regular/style'; // Date / Logic\n\nimport React, { Component } from 'react';\nimport { FormContext } from '../form/Form';\nexport const TYPES = ['textinput', 'textarea'];\n\nclass TextField extends Component {\n  getTextType() {\n    return this.props.hideContent ? 'password' : 'text';\n  }\n\n  getFieldType() {\n    return TYPES.includes(this.props.type) ? this.props.type : TYPES[0];\n  }\n\n  handleBlur(event) {\n    console.log(\"Blur\");\n\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n  }\n\n  handleChange(event, context) {\n    const {\n      id\n    } = this.props;\n    const value = event.currentTarget.value;\n    context === null || context === void 0 ? void 0 : context.setValue(id, value);\n\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n  }\n\n  render() {\n    const {\n      id,\n      label,\n      placeholder\n    } = this.props;\n    const error = this.props.errorMessage !== null;\n    const type = this.getFieldType();\n    return React.createElement(FormContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, context => React.createElement(Block, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Margin, {\n      amount: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, label && React.createElement(MarginLeft, {\n      amount: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, label)), React.createElement(MarginTop, {\n      amount: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.getFieldType() === TYPES[0] && React.createElement(StyledInput, {\n      name: id,\n      id: id,\n      error: error,\n      placeholder: placeholder,\n      type: this.getTextType(),\n      onBlur: e => this.handleBlur(e),\n      onChange: e => this.handleChange(e, context),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), this.getFieldType() === TYPES[1] && React.createElement(StyledTextArea, {\n      name: id,\n      id: id,\n      error: error,\n      placeholder: placeholder,\n      onBlur: e => this.handleBlur(e),\n      onChange: e => this.handleChange(e, context),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default TextField;","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/reusable/form/text-field/TextField.tsx"],"names":["StyledInput","StyledTextArea","Margin","MarginTop","Block","MarginLeft","React","Component","FormContext","TYPES","TextField","getTextType","props","hideContent","getFieldType","includes","type","handleBlur","event","console","log","onBlur","handleChange","context","id","value","currentTarget","setValue","onChange","render","label","placeholder","error","errorMessage","e"],"mappings":"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","sourcesContent":["// Style\r\nimport { StyledInput } from './text-input-style';\r\nimport { StyledTextArea } from './text-area-style';\r\nimport { Margin, MarginTop, Block, MarginLeft } from '../../regular/style';\r\n\r\n// Date / Logic\r\nimport React, { Component, FormEvent } from 'react';\r\nimport { IFormContext, FormContext } from '../form/Form';\r\n\r\nexport const TYPES = ['textinput', 'textarea'];\r\n\r\ninterface ITextFieldProp {\r\n    id: string;\r\n    type: string;\r\n    onBlur?(e: TextFieldEvent): void;\r\n    onChange?(e: TextFieldEvent): void;\r\n    label?: string;\r\n    placeholder?: string;\r\n    hideContent?: boolean;\r\n    required?: boolean;\r\n    errorMessage?: string | null;\r\n}\r\n\r\nexport type TextFieldEvent = FormEvent<HTMLInputElement> | FormEvent<HTMLTextAreaElement>;\r\n\r\nclass TextField extends Component<ITextFieldProp, {}> {\r\n    getTextType() {\r\n        return this.props.hideContent ? 'password' : 'text';\r\n    }\r\n\r\n    getFieldType() {\r\n        return TYPES.includes(this.props.type) ? this.props.type : TYPES[0];\r\n    }\r\n\r\n    handleBlur(event: TextFieldEvent) {\r\n        console.log(\"Blur\");\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(event);\r\n        }\r\n    }\r\n\r\n    handleChange(event: TextFieldEvent, context?: IFormContext) {\r\n        const { id } = this.props;\r\n        const value = event.currentTarget.value;\r\n        context?.setValue(id, value);\r\n\r\n        if (this.props.onChange) {\r\n            this.props.onChange(event);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { id, label, placeholder } = this.props;\r\n        const error = this.props.errorMessage !== null;\r\n        const type = this.getFieldType();\r\n\r\n        return (\r\n            <FormContext.Consumer>\r\n                {(context?: IFormContext) => (\r\n                    <Block>\r\n                        <Margin amount={10}>\r\n                            {label && (\r\n                                <MarginLeft amount={5}>\r\n                                    <label htmlFor={id}>{label}</label>\r\n                                </MarginLeft>\r\n                            )}\r\n                            <MarginTop amount={5}>\r\n                                {this.getFieldType() === TYPES[0] && (\r\n                                    <StyledInput \r\n                                        name={id} \r\n                                        id={id} \r\n                                        error={error} \r\n                                        placeholder={placeholder} \r\n                                        type={this.getTextType()} \r\n                                        onBlur={(e: FormEvent<HTMLInputElement>) => this.handleBlur(e)} \r\n                                        onChange={(e: FormEvent<HTMLInputElement>) => this.handleChange(e, context)}/>\r\n                                )}\r\n                                {this.getFieldType() === TYPES[1] && (\r\n                                    <StyledTextArea \r\n                                        name={id} \r\n                                        id={id} \r\n                                        error={error} \r\n                                        placeholder={placeholder} \r\n                                        onBlur={(e: FormEvent<HTMLTextAreaElement>) => this.handleBlur(e)}\r\n                                        onChange={(e: FormEvent<HTMLTextAreaElement>) => this.handleChange(e, context)}/>\r\n                                )}\r\n                            </MarginTop>\r\n                        </Margin>\r\n                    </Block>\r\n                )}\r\n            </FormContext.Consumer>\r\n        )\r\n    }\r\n} \r\n\r\nexport default TextField;"]},"metadata":{},"sourceType":"module"}