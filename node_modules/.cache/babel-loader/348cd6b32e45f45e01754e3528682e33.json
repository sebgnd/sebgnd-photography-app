{"ast":null,"code":"export default class Image {\n  constructor(id, category, uploadDate = new Date()) {\n    this._id = void 0;\n    this._category = void 0;\n    this._aperture = undefined;\n    this._iso = undefined;\n    this._shutterSpeed = undefined;\n    this._focalLength = undefined;\n    this._uploadDate = void 0;\n    this._width = 0;\n    this._height = 0;\n    this._id = id;\n    this._uploadDate = uploadDate;\n    this._category = category;\n  }\n\n  clone() {\n    const image = { ...this,\n      uploadDate: new Date(this.uploadDate)\n    };\n    return image;\n  }\n\n  static format(json) {\n    const {\n      id,\n      uploadDate\n    } = json;\n    return new Image(id, new Date(uploadDate));\n  }\n\n  hasExif() {\n    return this.aperture !== null && this.iso !== null && this.shutterSpeed !== null && this.focalLength !== null;\n  }\n\n  toExifString() {\n    if (this.hasExif()) {\n      var _this$iso;\n\n      return `ISO: ${(_this$iso = this.iso) === null || _this$iso === void 0 ? void 0 : _this$iso.toString()}, ${this.shutterSpeed}, ${this.aperture}, ${this.focalLength}`;\n    }\n\n    return 'No information';\n  }\n\n  getFormatedDate() {\n    return this.uploadDate.toLocaleDateString('en-us', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  }\n\n  isPortrait() {\n    return true;\n  }\n\n  isLandscape() {\n    return true;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get uploadDate() {\n    return this._uploadDate;\n  }\n\n  set aperture(aperture) {\n    this._aperture = aperture;\n  }\n\n  set iso(iso) {\n    this._iso = iso;\n  }\n\n  set shutterSpeed(shutterSpeed) {\n    this._shutterSpeed = shutterSpeed;\n  }\n\n  set focalLength(focalLength) {\n    this._focalLength = focalLength;\n  }\n\n}","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/helper/image/Image.ts"],"names":["Image","constructor","id","category","uploadDate","Date","_id","_category","_aperture","undefined","_iso","_shutterSpeed","_focalLength","_uploadDate","_width","_height","clone","image","format","json","hasExif","aperture","iso","shutterSpeed","focalLength","toExifString","toString","getFormatedDate","toLocaleDateString","year","month","day","isPortrait","isLandscape"],"mappings":"AAEA,eAAe,MAAMA,KAAN,CAAY;AAavBC,EAAAA,WAAW,CAACC,EAAD,EAAaC,QAAb,EAAiCC,UAAgB,GAAG,IAAIC,IAAJ,EAApD,EAAgE;AAAA,SAZnEC,GAYmE;AAAA,SAXnEC,SAWmE;AAAA,SATnEC,SASmE,GATnCC,SASmC;AAAA,SARnEC,IAQmE,GARxCD,SAQwC;AAAA,SAPnEE,aAOmE,GAP/BF,SAO+B;AAAA,SANnEG,YAMmE,GANhCH,SAMgC;AAAA,SALnEI,WAKmE;AAAA,SAHnEC,MAGmE,GAHlD,CAGkD;AAAA,SAFnEC,OAEmE,GAFjD,CAEiD;AACvE,SAAKT,GAAL,GAAWJ,EAAX;AACA,SAAKW,WAAL,GAAmBT,UAAnB;AACA,SAAKG,SAAL,GAAiBJ,QAAjB;AACH;;AAEDa,EAAAA,KAAK,GAAU;AACX,UAAMC,KAAY,GAAG,EAAE,GAAG,IAAL;AAAWb,MAAAA,UAAU,EAAE,IAAIC,IAAJ,CAAS,KAAKD,UAAd;AAAvB,KAArB;AACA,WAAOa,KAAP;AACH;;AAED,SAAOC,MAAP,CAAcC,IAAd,EAAgC;AAC5B,UAAM;AAAEjB,MAAAA,EAAF;AAAME,MAAAA;AAAN,QAAqBe,IAA3B;AACA,WAAO,IAAInB,KAAJ,CAAUE,EAAV,EAAc,IAAIG,IAAJ,CAASD,UAAT,CAAd,CAAP;AACH;;AAEDgB,EAAAA,OAAO,GAAY;AACf,WAAO,KAAKC,QAAL,KAAkB,IAAlB,IACA,KAAKC,GAAL,KAAa,IADb,IAEA,KAAKC,YAAL,KAAsB,IAFtB,IAGA,KAAKC,WAAL,KAAqB,IAH5B;AAIH;;AAEDC,EAAAA,YAAY,GAAW;AACnB,QAAI,KAAKL,OAAL,EAAJ,EAAoB;AAAA;;AAChB,aAAQ,QAAD,aAAQ,KAAKE,GAAb,8CAAQ,UAAUI,QAAV,EAAqB,KAAI,KAAKH,YAAa,KAAI,KAAKF,QAAS,KAAI,KAAKG,WAAY,EAAjG;AACH;;AACD,WAAO,gBAAP;AACH;;AAEDG,EAAAA,eAAe,GAAW;AACtB,WAAO,KAAKvB,UAAL,CAAgBwB,kBAAhB,CAAmC,OAAnC,EAA4C;AAC/CC,MAAAA,IAAI,EAAE,SADyC;AAE/CC,MAAAA,KAAK,EAAE,MAFwC;AAG/CC,MAAAA,GAAG,EAAE;AAH0C,KAA5C,CAAP;AAKH;;AAEDC,EAAAA,UAAU,GAAY;AAClB,WAAO,IAAP;AACH;;AAEDC,EAAAA,WAAW,GAAY;AACnB,WAAO,IAAP;AACH;;AAED,MAAI/B,EAAJ,GAAiB;AACb,WAAO,KAAKI,GAAZ;AACH;;AAED,MAAIF,UAAJ,GAAuB;AACnB,WAAO,KAAKS,WAAZ;AACH;;AAED,MAAIQ,QAAJ,CAAaA,QAAb,EAA+B;AAC3B,SAAKb,SAAL,GAAiBa,QAAjB;AACH;;AAED,MAAIC,GAAJ,CAAQA,GAAR,EAAqB;AACjB,SAAKZ,IAAL,GAAYY,GAAZ;AACH;;AAED,MAAIC,YAAJ,CAAiBA,YAAjB,EAAuC;AACnC,SAAKZ,aAAL,GAAqBY,YAArB;AACH;;AAED,MAAIC,WAAJ,CAAgBA,WAAhB,EAAqC;AACjC,SAAKZ,YAAL,GAAoBY,WAApB;AACH;;AAjFsB","sourcesContent":["import Category from \"../Category\";\r\n\r\nexport default class Image {\r\n    private _id: number;\r\n    private _category: Category;\r\n    \r\n    private _aperture: string | undefined = undefined;\r\n    private _iso: number | undefined = undefined;\r\n    private _shutterSpeed: string | undefined = undefined;\r\n    private _focalLength: string | undefined = undefined;\r\n    private _uploadDate: Date;\r\n\r\n    private _width: number = 0;\r\n    private _height: number = 0;\r\n\r\n    constructor(id: number, category: Category, uploadDate: Date = new Date()) {\r\n        this._id = id;\r\n        this._uploadDate = uploadDate;\r\n        this._category = category;\r\n    }\r\n\r\n    clone(): Image {\r\n        const image: Image = { ...this, uploadDate: new Date(this.uploadDate) };\r\n        return image;\r\n    }\r\n\r\n    static format(json: any): Image {\r\n        const { id, uploadDate } = json;\r\n        return new Image(id, new Date(uploadDate));\r\n    }\r\n\r\n    hasExif(): boolean {\r\n        return this.aperture !== null \r\n            && this.iso !== null \r\n            && this.shutterSpeed !== null \r\n            && this.focalLength !== null;\r\n    }\r\n\r\n    toExifString(): string {\r\n        if (this.hasExif()) {\r\n            return `ISO: ${this.iso?.toString()}, ${this.shutterSpeed}, ${this.aperture}, ${this.focalLength}`;\r\n        }\r\n        return 'No information'\r\n    }\r\n\r\n    getFormatedDate(): string {\r\n        return this.uploadDate.toLocaleDateString('en-us', {\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric',\r\n        });\r\n    }\r\n\r\n    isPortrait(): boolean {\r\n        return true;\r\n    }\r\n\r\n    isLandscape(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get id(): number {\r\n        return this._id;\r\n    }\r\n\r\n    get uploadDate(): Date {\r\n        return this._uploadDate;\r\n    }\r\n\r\n    set aperture(aperture: string) {\r\n        this._aperture = aperture;\r\n    }\r\n\r\n    set iso(iso: number) {\r\n        this._iso = iso;\r\n    }\r\n\r\n    set shutterSpeed(shutterSpeed: string) {\r\n        this._shutterSpeed = shutterSpeed;\r\n    }\r\n\r\n    set focalLength(focalLength: string) {\r\n        this._focalLength = focalLength;\r\n    } \r\n}"]},"metadata":{},"sourceType":"module"}