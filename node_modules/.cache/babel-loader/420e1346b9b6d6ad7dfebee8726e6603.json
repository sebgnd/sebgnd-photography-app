{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst queue_1 = require(\"queue\");\n\nconst types_1 = require(\"./types\");\n\nconst detector_1 = require(\"./detector\");\n\nrequire(\"./fs.promises\"); // Maximum buffer size, with a default of 512 kilobytes.\n// TO-DO: make this adaptive based on the initial signature of the image\n\n\nconst MaxBufferSize = 512 * 1024; // This queue is for async `fs` operations, to avoid reaching file-descriptor limits\n\nconst queue = new queue_1.default({\n  concurrency: 100,\n  autostart: true\n});\n/**\n * Return size information based on a buffer\n *\n * @param {Buffer} buffer\n * @param {String} filepath\n * @returns {Object}\n */\n\nfunction lookup(buffer, filepath) {\n  // detect the file type.. don't rely on the extension\n  const type = detector_1.detector(buffer); // find an appropriate handler for this file type\n\n  if (type && type in types_1.typeHandlers) {\n    const size = types_1.typeHandlers[type].calculate(buffer, filepath);\n\n    if (size !== undefined) {\n      size.type = type;\n      return size;\n    }\n  } // throw up, if we don't understand the file\n\n\n  throw new TypeError('unsupported file type: ' + type + ' (file: ' + filepath + ')');\n}\n/**\n * Reads a file into a buffer.\n * @param {String} filepath\n * @returns {Promise<Buffer>}\n */\n\n\nfunction asyncFileToBuffer(filepath) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const handle = yield fs.promises.open(filepath, 'r');\n    const {\n      size\n    } = yield handle.stat();\n\n    if (size <= 0) {\n      throw new Error('Empty file');\n    }\n\n    const bufferSize = Math.min(size, MaxBufferSize);\n    const buffer = Buffer.alloc(bufferSize);\n    yield handle.read(buffer, 0, bufferSize, 0);\n    yield handle.close();\n    return buffer;\n  });\n}\n/**\n * Synchronously reads a file into a buffer, blocking the nodejs process.\n *\n * @param {String} filepath\n * @returns {Buffer}\n */\n\n\nfunction syncFileToBuffer(filepath) {\n  // read from the file, synchronously\n  const descriptor = fs.openSync(filepath, 'r');\n  const size = fs.fstatSync(descriptor).size;\n  const bufferSize = Math.min(size, MaxBufferSize);\n  const buffer = Buffer.alloc(bufferSize);\n  fs.readSync(descriptor, buffer, 0, bufferSize, 0);\n  fs.closeSync(descriptor);\n  return buffer;\n}\n\nmodule.exports = exports = imageSize; // backwards compatibility\n\n/**\n * @param {Buffer|string} input - buffer or relative/absolute path of the image file\n * @param {Function=} [callback] - optional function for async detection\n */\n\nfunction imageSize(input, callback) {\n  // Handle buffer input\n  if (Buffer.isBuffer(input)) {\n    return lookup(input);\n  } // input should be a string at this point\n\n\n  if (typeof input !== 'string') {\n    throw new TypeError('invalid invocation');\n  } // resolve the file path\n\n\n  const filepath = path.resolve(input);\n\n  if (typeof callback === 'function') {\n    queue.push(() => asyncFileToBuffer(filepath).then(buffer => process.nextTick(callback, null, lookup(buffer, filepath))).catch(callback));\n  } else {\n    const buffer = syncFileToBuffer(filepath);\n    return lookup(buffer, filepath);\n  }\n}\n\nexports.imageSize = imageSize;\n\nexports.setConcurrency = c => {\n  queue.concurrency = c;\n};\n\nexports.types = Object.keys(types_1.typeHandlers);","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/node_modules/image-size/dist/index.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","fs","require","path","queue_1","types_1","detector_1","MaxBufferSize","queue","default","concurrency","autostart","lookup","buffer","filepath","type","detector","typeHandlers","size","calculate","undefined","TypeError","asyncFileToBuffer","handle","promises","open","stat","Error","bufferSize","Math","min","Buffer","alloc","read","close","syncFileToBuffer","descriptor","openSync","fstatSync","readSync","closeSync","module","imageSize","input","callback","isBuffer","push","process","nextTick","catch","setConcurrency","c","types","keys"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst queue_1 = require(\"queue\");\nconst types_1 = require(\"./types\");\nconst detector_1 = require(\"./detector\");\nrequire(\"./fs.promises\");\n// Maximum buffer size, with a default of 512 kilobytes.\n// TO-DO: make this adaptive based on the initial signature of the image\nconst MaxBufferSize = 512 * 1024;\n// This queue is for async `fs` operations, to avoid reaching file-descriptor limits\nconst queue = new queue_1.default({ concurrency: 100, autostart: true });\n/**\n * Return size information based on a buffer\n *\n * @param {Buffer} buffer\n * @param {String} filepath\n * @returns {Object}\n */\nfunction lookup(buffer, filepath) {\n    // detect the file type.. don't rely on the extension\n    const type = detector_1.detector(buffer);\n    // find an appropriate handler for this file type\n    if (type && type in types_1.typeHandlers) {\n        const size = types_1.typeHandlers[type].calculate(buffer, filepath);\n        if (size !== undefined) {\n            size.type = type;\n            return size;\n        }\n    }\n    // throw up, if we don't understand the file\n    throw new TypeError('unsupported file type: ' + type + ' (file: ' + filepath + ')');\n}\n/**\n * Reads a file into a buffer.\n * @param {String} filepath\n * @returns {Promise<Buffer>}\n */\nfunction asyncFileToBuffer(filepath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const handle = yield fs.promises.open(filepath, 'r');\n        const { size } = yield handle.stat();\n        if (size <= 0) {\n            throw new Error('Empty file');\n        }\n        const bufferSize = Math.min(size, MaxBufferSize);\n        const buffer = Buffer.alloc(bufferSize);\n        yield handle.read(buffer, 0, bufferSize, 0);\n        yield handle.close();\n        return buffer;\n    });\n}\n/**\n * Synchronously reads a file into a buffer, blocking the nodejs process.\n *\n * @param {String} filepath\n * @returns {Buffer}\n */\nfunction syncFileToBuffer(filepath) {\n    // read from the file, synchronously\n    const descriptor = fs.openSync(filepath, 'r');\n    const size = fs.fstatSync(descriptor).size;\n    const bufferSize = Math.min(size, MaxBufferSize);\n    const buffer = Buffer.alloc(bufferSize);\n    fs.readSync(descriptor, buffer, 0, bufferSize, 0);\n    fs.closeSync(descriptor);\n    return buffer;\n}\nmodule.exports = exports = imageSize; // backwards compatibility\n/**\n * @param {Buffer|string} input - buffer or relative/absolute path of the image file\n * @param {Function=} [callback] - optional function for async detection\n */\nfunction imageSize(input, callback) {\n    // Handle buffer input\n    if (Buffer.isBuffer(input)) {\n        return lookup(input);\n    }\n    // input should be a string at this point\n    if (typeof input !== 'string') {\n        throw new TypeError('invalid invocation');\n    }\n    // resolve the file path\n    const filepath = path.resolve(input);\n    if (typeof callback === 'function') {\n        queue.push(() => asyncFileToBuffer(filepath)\n            .then((buffer) => process.nextTick(callback, null, lookup(buffer, filepath)))\n            .catch(callback));\n    }\n    else {\n        const buffer = syncFileToBuffer(filepath);\n        return lookup(buffer, filepath);\n    }\n}\nexports.imageSize = imageSize;\nexports.setConcurrency = (c) => { queue.concurrency = c; };\nexports.types = Object.keys(types_1.typeHandlers);\n"]},"metadata":{},"sourceType":"script"}