{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\_containers\\\\Recent\\\\Recent.tsx\";\nimport React, { Component } from 'react';\nimport { Button } from '../../UI/Button';\nimport ImageService from '../../../helper/image/ImageService';\nimport { clearTimeout } from 'timers';\nconst NB_IMAGE_PER_FETCH = 5;\nconst MIN_TIME_BETWEEN_FETCH = 5000;\n\nclass Recent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.enableLoadTimeout = -1;\n    this.state = {\n      images: [],\n      error: false,\n      loading: true,\n      canLoad: true,\n      errorMessage: '',\n      nbImagesLoaded: 0\n    };\n  }\n\n  // TODO: When fetching new images => set loading to true\n  // TODO: Can load new image every second\n  async fetchImages() {\n    if (!this.state.canLoad) {\n      return;\n    }\n\n    const imageService = new ImageService();\n\n    try {\n      const {\n        nbImagesLoaded,\n        images\n      } = this.state;\n      const newImages = await imageService.getKImagesFromOffset(NB_IMAGE_PER_FETCH, nbImagesLoaded);\n      this.setState({\n        loading: false,\n        error: false,\n        canLoad: false,\n        images: [...images, ...newImages],\n        nbImagesLoaded: nbImagesLoaded + newImages.length\n      });\n    } catch (e) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorMessage: e.message\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.canLoad !== this.state.canLoad) {\n      this.enableLoadTimeout = setTimeout(() => {\n        this.setState({\n          canLoad: true\n        });\n      }, MIN_TIME_BETWEEN_FETCH);\n    }\n  }\n\n  handleScroll() {}\n\n  componentDidMount() {\n    this.fetchImages();\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n\n    if (this.enableLoadTimeout !== -1) {\n      clearTimeout(this.enableLoadTimeout);\n    }\n  }\n\n  render() {\n    return React.createElement(Button, {\n      variant: \"classic\",\n      size: \"medium\",\n      onClick: () => this.fetchImages(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Load\");\n  }\n\n}\n\nexport default Recent;","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/_containers/Recent/Recent.tsx"],"names":["React","Component","Button","ImageService","clearTimeout","NB_IMAGE_PER_FETCH","MIN_TIME_BETWEEN_FETCH","Recent","enableLoadTimeout","state","images","error","loading","canLoad","errorMessage","nbImagesLoaded","fetchImages","imageService","newImages","getKImagesFromOffset","setState","length","e","message","componentDidUpdate","prevProps","prevState","setTimeout","handleScroll","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAGA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,SAASC,YAAT,QAA6B,QAA7B;AAWA,MAAMC,kBAA0B,GAAG,CAAnC;AACA,MAAMC,sBAA8B,GAAG,IAAvC;;AAEA,MAAMC,MAAN,SAAqBN,SAArB,CAAgD;AAAA;AAAA;AAAA,SAC5CO,iBAD4C,GAChB,CAAC,CADe;AAAA,SAE5CC,KAF4C,GAEpC;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,KAAK,EAAE,KAFH;AAGJC,MAAAA,OAAO,EAAE,IAHL;AAIJC,MAAAA,OAAO,EAAE,IAJL;AAKJC,MAAAA,YAAY,EAAE,EALV;AAMJC,MAAAA,cAAc,EAAE;AANZ,KAFoC;AAAA;;AAY5C;AACA;AACA,QAAMC,WAAN,GAAoB;AAChB,QAAI,CAAC,KAAKP,KAAL,CAAWI,OAAhB,EAAyB;AACrB;AACH;;AACD,UAAMI,YAAY,GAAG,IAAId,YAAJ,EAArB;;AACA,QAAI;AACA,YAAM;AAAEY,QAAAA,cAAF;AAAkBL,QAAAA;AAAlB,UAA6B,KAAKD,KAAxC;AACA,YAAMS,SAAkB,GAAG,MAAMD,YAAY,CAACE,oBAAb,CAAkCd,kBAAlC,EAAsDU,cAAtD,CAAjC;AAEA,WAAKK,QAAL,CAAc;AACVR,QAAAA,OAAO,EAAE,KADC;AAEVD,QAAAA,KAAK,EAAE,KAFG;AAGVE,QAAAA,OAAO,EAAE,KAHC;AAIVH,QAAAA,MAAM,EAAE,CAAC,GAAGA,MAAJ,EAAY,GAAGQ,SAAf,CAJE;AAKVH,QAAAA,cAAc,EAAEA,cAAc,GAAGG,SAAS,CAACG;AALjC,OAAd;AAQH,KAZD,CAYE,OAAOC,CAAP,EAAU;AACR,WAAKF,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAE,KAAX;AAAkBD,QAAAA,KAAK,EAAE,IAAzB;AAA+BG,QAAAA,YAAY,EAAEQ,CAAC,CAACC;AAA/C,OAAd;AACH;AACJ;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAgBC,SAAhB,EAAwC;AACtD,QAAIA,SAAS,CAACb,OAAV,KAAsB,KAAKJ,KAAL,CAAWI,OAArC,EAA8C;AAC1C,WAAKL,iBAAL,GAAyBmB,UAAU,CAAC,MAAM;AACtC,aAAKP,QAAL,CAAc;AAAEP,UAAAA,OAAO,EAAE;AAAX,SAAd;AACH,OAFkC,EAEhCP,sBAFgC,CAAnC;AAGH;AACJ;;AAEDsB,EAAAA,YAAY,GAAG,CAEd;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKb,WAAL;AACAc,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKH,YAAvC;AACH;;AAEDI,EAAAA,oBAAoB,GAAG;AACnBF,IAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKL,YAA1C;;AACA,QAAI,KAAKpB,iBAAL,KAA2B,CAAC,CAAhC,EAAmC;AAC/BJ,MAAAA,YAAY,CAAC,KAAKI,iBAAN,CAAZ;AACH;AACJ;;AAED0B,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,IAAI,EAAC,QAA/B;AAAwC,MAAA,OAAO,EAAE,MAAM,KAAKlB,WAAL,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;;AAhE2C;;AAmEhD,eAAeT,MAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button } from '../../UI/Button';\r\nimport HttpRequest from '../../../helper/http/HttpRequest';\r\nimport Image from '../../../helper/image/Image';\r\nimport ImageService from '../../../helper/image/ImageService';\r\nimport { clearTimeout } from 'timers';\r\n\r\ninterface RecentState {\r\n    images: Image[];\r\n    error: boolean;\r\n    loading: boolean;\r\n    errorMessage: string;\r\n    nbImagesLoaded: number;\r\n    canLoad: boolean;\r\n}\r\n\r\nconst NB_IMAGE_PER_FETCH: number = 5;\r\nconst MIN_TIME_BETWEEN_FETCH: number = 5000;\r\n\r\nclass Recent extends Component<{}, RecentState> {\r\n    enableLoadTimeout: number = -1;\r\n    state = {\r\n        images: [],\r\n        error: false,\r\n        loading: true,\r\n        canLoad: true,\r\n        errorMessage: '',\r\n        nbImagesLoaded: 0,\r\n    }\r\n\r\n\r\n    // TODO: When fetching new images => set loading to true\r\n    // TODO: Can load new image every second\r\n    async fetchImages() {\r\n        if (!this.state.canLoad) {\r\n            return;\r\n        }\r\n        const imageService = new ImageService();\r\n        try {\r\n            const { nbImagesLoaded, images } = this.state;\r\n            const newImages: Image[] = await imageService.getKImagesFromOffset(NB_IMAGE_PER_FETCH, nbImagesLoaded);\r\n\r\n            this.setState({ \r\n                loading: false, \r\n                error: false, \r\n                canLoad: false, \r\n                images: [...images, ...newImages], \r\n                nbImagesLoaded: nbImagesLoaded + newImages.length \r\n            });\r\n\r\n        } catch (e) {\r\n            this.setState({ loading: false, error: true, errorMessage: e.message});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: {}, prevState: RecentState) {\r\n        if (prevState.canLoad !== this.state.canLoad) {\r\n            this.enableLoadTimeout = setTimeout(() => {\r\n                this.setState({ canLoad: true })\r\n            }, MIN_TIME_BETWEEN_FETCH);\r\n        }\r\n    }\r\n\r\n    handleScroll() {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchImages();\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    componentWillUnmount() {   \r\n        window.removeEventListener('scroll', this.handleScroll);\r\n        if (this.enableLoadTimeout !== -1) {\r\n            clearTimeout(this.enableLoadTimeout);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button variant=\"classic\" size=\"medium\" onClick={() => this.fetchImages()}>Load</Button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Recent;"]},"metadata":{},"sourceType":"module"}