{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\reusable\\\\info-display\\\\InfoDisplay.tsx\";\nimport React, { Component } from 'react';\nimport { Text } from '../regular/text';\nimport { Absolute } from '../regular/positionning';\nimport { Info } from './info-display';\nconst POSITIONS = ['bottom-right', 'top-right', 'bottom-left', 'top-left'];\n/* TODO:\r\n    - Position -> top-left, top-right, ...\r\n    - Info -> what is being displayed\r\n    - max/minWidth -> if it has a size (Absolute / AbsoluteWidthSize)\r\n    - \r\n*/\n\nclass InfoDisplay extends Component {\n  getPosition() {\n    let {\n      position\n    } = this.props;\n    let positionValues = new Array(4).fill(undefined); // Array with the positions [top, bottom, left, right]\n\n    if (!POSITIONS.includes(position)) {\n      position = POSITIONS[0];\n    }\n\n    const positionSides = position.split('-');\n\n    if (positionSides[0] === 'top') {\n      positionValues[0] = -25;\n    } else {\n      positionValues[1] = -25;\n    }\n\n    if (positionSides[1] === 'left') {\n      positionValues[2] = -25;\n    } else {\n      positionValues[3] = -25;\n    }\n\n    return positionValues;\n  }\n\n  render() {\n    const positionValues = this.getPosition();\n    return React.createElement(Absolute, {\n      top: positionValues[0],\n      bottom: positionValues[1],\n      left: positionValues[2],\n      right: positionValues[3],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Info, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Text, {\n      size: \"medium\",\n      color: \"black\",\n      weight: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.props.info)));\n  }\n\n}\n\nexport default InfoDisplay;","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/reusable/info-display/InfoDisplay.tsx"],"names":["React","Component","Text","Absolute","Info","POSITIONS","InfoDisplay","getPosition","position","props","positionValues","Array","fill","undefined","includes","positionSides","split","render","info"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,QAAT,QAA4C,yBAA5C;AACA,SAASC,IAAT,QAAqB,gBAArB;AAgBA,MAAMC,SAAmB,GAAG,CAAC,cAAD,EAAiB,WAAjB,EAA8B,aAA9B,EAA6C,UAA7C,CAA5B;AAEA;;;;;;;AAOA,MAAMC,WAAN,SAA0BL,SAA1B,CAA2D;AACvDM,EAAAA,WAAW,GAAG;AACV,QAAI;AAAEC,MAAAA;AAAF,QAAe,KAAKC,KAAxB;AACA,QAAIC,cAAsC,GAAG,IAAIC,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkBC,SAAlB,CAA7C,CAFU,CAEiE;;AAE3E,QAAI,CAACR,SAAS,CAACS,QAAV,CAAmBN,QAAnB,CAAL,EAAmC;AAC/BA,MAAAA,QAAQ,GAAGH,SAAS,CAAC,CAAD,CAApB;AACH;;AACD,UAAMU,aAAa,GAAGP,QAAQ,CAACQ,KAAT,CAAe,GAAf,CAAtB;;AACA,QAAID,aAAa,CAAC,CAAD,CAAb,KAAqB,KAAzB,EAAgC;AAC5BL,MAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,CAAC,EAArB;AACH,KAFD,MAEQ;AACJA,MAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,CAAC,EAArB;AACH;;AACD,QAAIK,aAAa,CAAC,CAAD,CAAb,KAAqB,MAAzB,EAAiC;AAC7BL,MAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,CAAC,EAArB;AACH,KAFD,MAEO;AACHA,MAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,CAAC,EAArB;AACH;;AACD,WAAOA,cAAP;AACH;;AACDO,EAAAA,MAAM,GAAG;AACL,UAAMP,cAAc,GAAG,KAAKH,WAAL,EAAvB;AACA,WACI,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEG,cAAc,CAAC,CAAD,CAA7B;AAAkC,MAAA,MAAM,EAAEA,cAAc,CAAC,CAAD,CAAxD;AAA6D,MAAA,IAAI,EAAEA,cAAc,CAAC,CAAD,CAAjF;AAAsF,MAAA,KAAK,EAAEA,cAAc,CAAC,CAAD,CAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAoB,MAAA,KAAK,EAAC,OAA1B;AAAkC,MAAA,MAAM,EAAC,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmD,KAAKD,KAAL,CAAWS,IAA9D,CADJ,CADJ,CADJ;AAOH;;AA9BsD;;AAiC3D,eAAeZ,WAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Text } from '../regular/text';\r\nimport { Absolute, AbsoluteWithWidth } from '../regular/positionning';\r\nimport { Info } from './info-display';\r\n\r\ninterface IInfoDisplayProps {\r\n    info: string;\r\n    position: string;\r\n    maxWidth?: number;\r\n    minWidth?: number;\r\n}\r\n\r\ninterface IPosition {\r\n    top?: number;\r\n    bottom?: number;\r\n    left?: number;\r\n    right?: number;\r\n}\r\n\r\nconst POSITIONS: string[] = ['bottom-right', 'top-right', 'bottom-left', 'top-left'];\r\n\r\n/* TODO:\r\n    - Position -> top-left, top-right, ...\r\n    - Info -> what is being displayed\r\n    - max/minWidth -> if it has a size (Absolute / AbsoluteWidthSize)\r\n    - \r\n*/\r\n\r\nclass InfoDisplay extends Component<IInfoDisplayProps, {}> {\r\n    getPosition() {\r\n        let { position } = this.props;\r\n        let positionValues: (number | undefined)[] = new Array(4).fill(undefined); // Array with the positions [top, bottom, left, right]\r\n\r\n        if (!POSITIONS.includes(position)) {\r\n            position = POSITIONS[0];\r\n        }\r\n        const positionSides = position.split('-');\r\n        if (positionSides[0] === 'top') {\r\n            positionValues[0] = -25;\r\n        }  else {\r\n            positionValues[1] = -25;\r\n        }\r\n        if (positionSides[1] === 'left') {\r\n            positionValues[2] = -25;\r\n        } else {\r\n            positionValues[3] = -25;\r\n        }\r\n        return positionValues;\r\n    }\r\n    render() {\r\n        const positionValues = this.getPosition();\r\n        return (\r\n            <Absolute top={positionValues[0]} bottom={positionValues[1]} left={positionValues[2]} right={positionValues[3]}>\r\n                <Info>\r\n                    <Text size=\"medium\" color=\"black\" weight=\"normal\">{this.props.info}</Text>\r\n                </Info>\r\n            </Absolute>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InfoDisplay;"]},"metadata":{},"sourceType":"module"}