{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst svgReg = /<svg\\s([^>\"']|\"[^\"]*\"|'[^']*')*>/;\nconst extractorRegExps = {\n  height: /\\sheight=(['\"])([^%]+?)\\1/,\n  root: svgReg,\n  viewbox: /\\sviewBox=(['\"])(.+?)\\1/,\n  width: /\\swidth=(['\"])([^%]+?)\\1/\n};\nconst INCH_CM = 2.54;\nconst units = {\n  cm: 96 / INCH_CM,\n  em: 16,\n  ex: 8,\n  m: 96 / INCH_CM * 100,\n  mm: 96 / INCH_CM / 10,\n  pc: 96 / 72 / 12,\n  pt: 96 / 72\n};\n\nfunction parseLength(len) {\n  const m = /([0-9.]+)([a-z]*)/.exec(len);\n\n  if (!m) {\n    return undefined;\n  }\n\n  return Math.round(parseFloat(m[1]) * (units[m[2]] || 1));\n}\n\nfunction parseViewbox(viewbox) {\n  const bounds = viewbox.split(' ');\n  return {\n    height: parseLength(bounds[3]),\n    width: parseLength(bounds[2])\n  };\n}\n\nfunction parseAttributes(root) {\n  const width = root.match(extractorRegExps.width);\n  const height = root.match(extractorRegExps.height);\n  const viewbox = root.match(extractorRegExps.viewbox);\n  return {\n    height: height && parseLength(height[2]),\n    viewbox: viewbox && parseViewbox(viewbox[2]),\n    width: width && parseLength(width[2])\n  };\n}\n\nfunction calculateByDimensions(attrs) {\n  return {\n    height: attrs.height,\n    width: attrs.width\n  };\n}\n\nfunction calculateByViewbox(attrs, viewbox) {\n  const ratio = viewbox.width / viewbox.height;\n\n  if (attrs.width) {\n    return {\n      height: Math.floor(attrs.width / ratio),\n      width: attrs.width\n    };\n  }\n\n  if (attrs.height) {\n    return {\n      height: attrs.height,\n      width: Math.floor(attrs.height * ratio)\n    };\n  }\n\n  return {\n    height: viewbox.height,\n    width: viewbox.width\n  };\n}\n\nexports.SVG = {\n  validate(buffer) {\n    const str = String(buffer);\n    return svgReg.test(str);\n  },\n\n  calculate(buffer) {\n    const root = buffer.toString('utf8').match(extractorRegExps.root);\n\n    if (root) {\n      const attrs = parseAttributes(root[0]);\n\n      if (attrs.width && attrs.height) {\n        return calculateByDimensions(attrs);\n      }\n\n      if (attrs.viewbox) {\n        return calculateByViewbox(attrs, attrs.viewbox);\n      }\n    }\n\n    throw new TypeError('Invalid SVG');\n  }\n\n};","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/node_modules/image-size/dist/types/svg.js"],"names":["Object","defineProperty","exports","value","svgReg","extractorRegExps","height","root","viewbox","width","INCH_CM","units","cm","em","ex","m","mm","pc","pt","parseLength","len","exec","undefined","Math","round","parseFloat","parseViewbox","bounds","split","parseAttributes","match","calculateByDimensions","attrs","calculateByViewbox","ratio","floor","SVG","validate","buffer","str","String","test","calculate","toString","TypeError"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst svgReg = /<svg\\s([^>\"']|\"[^\"]*\"|'[^']*')*>/;\nconst extractorRegExps = {\n    height: /\\sheight=(['\"])([^%]+?)\\1/,\n    root: svgReg,\n    viewbox: /\\sviewBox=(['\"])(.+?)\\1/,\n    width: /\\swidth=(['\"])([^%]+?)\\1/,\n};\nconst INCH_CM = 2.54;\nconst units = {\n    cm: 96 / INCH_CM,\n    em: 16,\n    ex: 8,\n    m: 96 / INCH_CM * 100,\n    mm: 96 / INCH_CM / 10,\n    pc: 96 / 72 / 12,\n    pt: 96 / 72,\n};\nfunction parseLength(len) {\n    const m = /([0-9.]+)([a-z]*)/.exec(len);\n    if (!m) {\n        return undefined;\n    }\n    return Math.round(parseFloat(m[1]) * (units[m[2]] || 1));\n}\nfunction parseViewbox(viewbox) {\n    const bounds = viewbox.split(' ');\n    return {\n        height: parseLength(bounds[3]),\n        width: parseLength(bounds[2])\n    };\n}\nfunction parseAttributes(root) {\n    const width = root.match(extractorRegExps.width);\n    const height = root.match(extractorRegExps.height);\n    const viewbox = root.match(extractorRegExps.viewbox);\n    return {\n        height: height && parseLength(height[2]),\n        viewbox: viewbox && parseViewbox(viewbox[2]),\n        width: width && parseLength(width[2]),\n    };\n}\nfunction calculateByDimensions(attrs) {\n    return {\n        height: attrs.height,\n        width: attrs.width,\n    };\n}\nfunction calculateByViewbox(attrs, viewbox) {\n    const ratio = viewbox.width / viewbox.height;\n    if (attrs.width) {\n        return {\n            height: Math.floor(attrs.width / ratio),\n            width: attrs.width,\n        };\n    }\n    if (attrs.height) {\n        return {\n            height: attrs.height,\n            width: Math.floor(attrs.height * ratio),\n        };\n    }\n    return {\n        height: viewbox.height,\n        width: viewbox.width,\n    };\n}\nexports.SVG = {\n    validate(buffer) {\n        const str = String(buffer);\n        return svgReg.test(str);\n    },\n    calculate(buffer) {\n        const root = buffer.toString('utf8').match(extractorRegExps.root);\n        if (root) {\n            const attrs = parseAttributes(root[0]);\n            if (attrs.width && attrs.height) {\n                return calculateByDimensions(attrs);\n            }\n            if (attrs.viewbox) {\n                return calculateByViewbox(attrs, attrs.viewbox);\n            }\n        }\n        throw new TypeError('Invalid SVG');\n    }\n};\n"]},"metadata":{},"sourceType":"script"}