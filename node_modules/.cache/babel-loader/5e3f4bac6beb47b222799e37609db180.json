{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\parallax\\\\Parallax.tsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { ParallaxContainer } from './parallax.style';\nimport { throttle } from 'lodash';\n\nconst Parallax = props => {\n  const {\n    img,\n    speed\n  } = props;\n  const parallaxElemRef = useRef(null);\n  const throttleTime = 10;\n  let topOffset = 0;\n  const [backgroundPositionY, setbackgroundPositionY] = useState(\"\");\n\n  const isElementVisible = () => {\n    if (parallaxElemRef && parallaxElemRef.current) {\n      const position = parallaxElemRef.current.getBoundingClientRect();\n\n      if (position.top < window.innerHeight && position.bottom >= 0) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const updatePosition = () => {\n    if (!isElementVisible()) {\n      return;\n    }\n\n    const bottomPageOffset = window.scrollY + window.innerHeight;\n    const offset = bottomPageOffset - parallaxElemRef.current.offsetTop;\n    const newTop = topOffset - offset * speed;\n    setbackgroundPositionY(`${newTop}px`);\n  };\n\n  const handleScroll = throttle(() => {\n    topOffset = parallaxElemRef.current.offsetHeight * speed;\n\n    if (isElementVisible()) {\n      const bottomPageOffset = window.scrollY + window.innerHeight;\n      const offset = bottomPageOffset - parallaxElemRef.current.offsetTop;\n      const newTop = topOffset - offset * speed;\n      setbackgroundPositionY(`${newTop}px`);\n    }\n  }, throttleTime);\n\n  const addEventListener = () => {\n    window.addEventListener('scroll', handleScroll);\n    window.addEventListener('resize', handleScroll);\n  };\n\n  useEffect(() => {\n    topOffset = parallaxElemRef.current.offsetHeight * speed;\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      window.removeEventListener('resize', handleScroll);\n    };\n  }, []);\n  return React.createElement(ParallaxContainer, {\n    ref: parallaxElemRef,\n    style: {\n      backgroundPositionY\n    },\n    backgroundImage: img,\n    top: topOffset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  });\n};\n\nexport default Parallax;","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/parallax/Parallax.tsx"],"names":["React","useEffect","useRef","useState","ParallaxContainer","throttle","Parallax","props","img","speed","parallaxElemRef","throttleTime","topOffset","backgroundPositionY","setbackgroundPositionY","isElementVisible","current","position","getBoundingClientRect","top","window","innerHeight","bottom","updatePosition","bottomPageOffset","scrollY","offset","offsetTop","newTop","handleScroll","offsetHeight","addEventListener","removeEventListener"],"mappings":";AAAA,OAAOA,KAAP,IAAmCC,SAAnC,EAA8CC,MAA9C,EAAsDC,QAAtD,QAAsE,OAAtE;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,QAAT,QAAyB,QAAzB;;AAOA,MAAMC,QAAyC,GAAIC,KAAD,IAAW;AACzD,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAiBF,KAAvB;AACA,QAAMG,eAAe,GAAGR,MAAM,CAAiB,IAAjB,CAA9B;AACA,QAAMS,YAAoB,GAAG,EAA7B;AACA,MAAIC,SAAiB,GAAG,CAAxB;AAEA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDX,QAAQ,CAAC,EAAD,CAA9D;;AAEA,QAAMY,gBAAgB,GAAG,MAAM;AAC3B,QAAIL,eAAe,IAAIA,eAAe,CAACM,OAAvC,EAAgD;AAC5C,YAAMC,QAAiB,GAAGP,eAAe,CAACM,OAAhB,CAAwBE,qBAAxB,EAA1B;;AACA,UAAID,QAAQ,CAACE,GAAT,GAAeC,MAAM,CAACC,WAAtB,IAAqCJ,QAAQ,CAACK,MAAT,IAAmB,CAA5D,EAA+D;AAC3D,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GARD;;AAUA,QAAMC,cAAc,GAAG,MAAM;AACzB,QAAI,CAACR,gBAAgB,EAArB,EAAyB;AACrB;AACH;;AACD,UAAMS,gBAAgB,GAAGJ,MAAM,CAACK,OAAP,GAAiBL,MAAM,CAACC,WAAjD;AACA,UAAMK,MAAM,GAAGF,gBAAgB,GAAGd,eAAe,CAACM,OAAhB,CAAyBW,SAA3D;AACA,UAAMC,MAAM,GAAGhB,SAAS,GAAGc,MAAM,GAAGjB,KAApC;AACAK,IAAAA,sBAAsB,CAAE,GAAEc,MAAO,IAAX,CAAtB;AACH,GARD;;AAUA,QAAMC,YAAY,GAAGxB,QAAQ,CAAC,MAAM;AAChCO,IAAAA,SAAS,GAAGF,eAAe,CAACM,OAAhB,CAAyBc,YAAzB,GAAwCrB,KAApD;;AACA,QAAIM,gBAAgB,EAApB,EAAwB;AACpB,YAAMS,gBAAgB,GAAGJ,MAAM,CAACK,OAAP,GAAiBL,MAAM,CAACC,WAAjD;AACA,YAAMK,MAAM,GAAGF,gBAAgB,GAAGd,eAAe,CAACM,OAAhB,CAAyBW,SAA3D;AACA,YAAMC,MAAM,GAAGhB,SAAS,GAAGc,MAAM,GAAGjB,KAApC;AACAK,MAAAA,sBAAsB,CAAE,GAAEc,MAAO,IAAX,CAAtB;AACH;AACJ,GAR4B,EAQ1BjB,YAR0B,CAA7B;;AAUA,QAAMoB,gBAAgB,GAAG,MAAM;AAC3BX,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACAT,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACH,GAHD;;AAKA5B,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,SAAS,GAAGF,eAAe,CAACM,OAAhB,CAAyBc,YAAzB,GAAwCrB,KAApD;AAEAW,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACA,WAAO,MAAM;AACTT,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC;AACAT,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC;AACH,KAHD;AAIH,GARQ,EAQN,EARM,CAAT;AAUA,SACI,oBAAC,iBAAD;AAAmB,IAAA,GAAG,EAAEnB,eAAxB;AAAyC,IAAA,KAAK,EAAE;AAACG,MAAAA;AAAD,KAAhD;AAAuE,IAAA,eAAe,EAAEL,GAAxF;AAA6F,IAAA,GAAG,EAAEI,SAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAxDD;;AA0DA,eAAeN,QAAf","sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState } from 'react';\r\nimport { ParallaxContainer } from './parallax.style';\r\nimport { throttle } from 'lodash';\r\n\r\ninterface ParallaxProp {\r\n    img: string;\r\n    speed: number;\r\n}\r\n\r\nconst Parallax: FunctionComponent<ParallaxProp> = (props) => {\r\n    const { img, speed } = props;\r\n    const parallaxElemRef = useRef<HTMLDivElement>(null);\r\n    const throttleTime: number = 10;\r\n    let topOffset: number = 0;\r\n\r\n    const [backgroundPositionY, setbackgroundPositionY] = useState(\"\");\r\n\r\n    const isElementVisible = () => {\r\n        if (parallaxElemRef && parallaxElemRef.current) {\r\n            const position: DOMRect = parallaxElemRef.current.getBoundingClientRect();\r\n            if (position.top < window.innerHeight && position.bottom >= 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const updatePosition = () => {\r\n        if (!isElementVisible()) {\r\n            return;\r\n        }\r\n        const bottomPageOffset = window.scrollY + window.innerHeight;\r\n        const offset = bottomPageOffset - parallaxElemRef.current!.offsetTop;\r\n        const newTop = topOffset - offset * speed;\r\n        setbackgroundPositionY(`${newTop}px`);\r\n    }\r\n\r\n    const handleScroll = throttle(() => {\r\n        topOffset = parallaxElemRef.current!.offsetHeight * speed;\r\n        if (isElementVisible()) {\r\n            const bottomPageOffset = window.scrollY + window.innerHeight;\r\n            const offset = bottomPageOffset - parallaxElemRef.current!.offsetTop;\r\n            const newTop = topOffset - offset * speed;\r\n            setbackgroundPositionY(`${newTop}px`);\r\n        }\r\n    }, throttleTime);\r\n\r\n    const addEventListener = () => {\r\n        window.addEventListener('scroll', handleScroll);\r\n        window.addEventListener('resize', handleScroll);\r\n    }\r\n\r\n    useEffect(() => {\r\n        topOffset = parallaxElemRef.current!.offsetHeight * speed;\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n            window.removeEventListener('resize', handleScroll);\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <ParallaxContainer ref={parallaxElemRef} style={{backgroundPositionY}} backgroundImage={img} top={topOffset} />\r\n    )\r\n}\r\n\r\nexport default Parallax;"]},"metadata":{},"sourceType":"module"}