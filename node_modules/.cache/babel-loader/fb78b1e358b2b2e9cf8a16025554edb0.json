{"ast":null,"code":"import Category from \"../category/Category\";\nimport ImageBuilder from './ImageBuilder';\nconst RESOLUTION_TYPES = ['full_res', 'medium_res', 'small_res', 'thumbnail_medium', 'thumbnail_small'];\nexport default class Image {\n  constructor(id, uploadDate = new Date(), category = new Category()) {\n    this._id = void 0;\n    this._category = void 0;\n    this._aperture = undefined;\n    this._iso = undefined;\n    this._shutterSpeed = undefined;\n    this._focalLength = undefined;\n    this._uploadDate = void 0;\n    this._width = 0;\n    this._height = 0;\n    this._id = id;\n    this._uploadDate = uploadDate;\n    this._category = category;\n  }\n\n  clone() {\n    const image = { ...this,\n      uploadDate: new Date(this.uploadDate)\n    };\n    return image;\n  }\n\n  static format(json) {\n    const uploadDate = new Date(json.uploadDate);\n    const imageBuilder = new ImageBuilder(json.id, uploadDate);\n    imageBuilder.setAperture(json.aperture).setFocalLength(json.focalLength).setIso(json.iso).setShutterSpeed(json.shutterSpeed);\n\n    if (json.category) {\n      const {\n        id,\n        displayName\n      } = json.category;\n      const category = new Category(id, displayName);\n      imageBuilder.setCategory(category);\n    }\n\n    return imageBuilder.build();\n  }\n\n  hasExif() {\n    return this.aperture !== null && this.iso !== null && this.shutterSpeed !== null && this.focalLength !== null;\n  }\n\n  toExifString() {\n    if (this.hasExif()) {\n      var _this$iso;\n\n      return `ISO: ${(_this$iso = this.iso) === null || _this$iso === void 0 ? void 0 : _this$iso.toString()}, ${this.shutterSpeed}, ${this.aperture}, ${this.focalLength}`;\n    }\n\n    return 'No information';\n  }\n\n  getFormatedDate() {\n    return this.uploadDate.toLocaleDateString('en-us', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  }\n\n  getUrl(resolutionType) {\n    if (RESOLUTION_TYPES.includes(resolutionType)) {\n      return `http://localhost:8000/image/${this.category.id}/${resolutionType}/${this.id}`;\n    }\n\n    return `http://localhost:8000/image/${this.category.id}/medium_res/${this.id}`;\n  }\n\n  isPortrait() {\n    return true;\n  }\n\n  isLandscape() {\n    return true;\n  }\n\n  get category() {\n    return this._category;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get uploadDate() {\n    return this._uploadDate;\n  }\n\n  set aperture(aperture) {\n    this._aperture = aperture;\n  }\n\n  set iso(iso) {\n    this._iso = iso;\n  }\n\n  set shutterSpeed(shutterSpeed) {\n    this._shutterSpeed = shutterSpeed;\n  }\n\n  set focalLength(focalLength) {\n    this._focalLength = focalLength;\n  }\n\n  set category(category) {\n    this._category = category;\n  }\n\n}","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/helper/image/Image.ts"],"names":["Category","ImageBuilder","RESOLUTION_TYPES","Image","constructor","id","uploadDate","Date","category","_id","_category","_aperture","undefined","_iso","_shutterSpeed","_focalLength","_uploadDate","_width","_height","clone","image","format","json","imageBuilder","setAperture","aperture","setFocalLength","focalLength","setIso","iso","setShutterSpeed","shutterSpeed","displayName","setCategory","build","hasExif","toExifString","toString","getFormatedDate","toLocaleDateString","year","month","day","getUrl","resolutionType","includes","isPortrait","isLandscape"],"mappings":"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","sourcesContent":["import Category from \"../category/Category\";\r\nimport ImageBuilder from './ImageBuilder';\r\n\r\nconst RESOLUTION_TYPES = [\r\n    'full_res',\r\n    'medium_res',\r\n    'small_res',\r\n    'thumbnail_medium',\r\n    'thumbnail_small'\r\n];\r\n\r\nexport default class Image {\r\n    private _id: number;\r\n    private _category: Category;\r\n    \r\n    private _aperture: string | undefined = undefined;\r\n    private _iso: number | undefined = undefined;\r\n    private _shutterSpeed: string | undefined = undefined;\r\n    private _focalLength: string | undefined = undefined;\r\n    private _uploadDate: Date;\r\n\r\n    private _width: number = 0;\r\n    private _height: number = 0;\r\n\r\n    constructor(id: number, uploadDate: Date = new Date(), category: Category = new Category()) {\r\n        this._id = id;\r\n        this._uploadDate = uploadDate;\r\n        this._category = category;\r\n    }\r\n\r\n    clone(): Image {\r\n        const image: Image = { ...this, uploadDate: new Date(this.uploadDate) };\r\n        return image;\r\n    }\r\n\r\n    static format(json: any): Image {\r\n        const uploadDate = new Date(json.uploadDate);\r\n        const imageBuilder = new ImageBuilder(json.id, uploadDate);\r\n\r\n        imageBuilder.setAperture(json.aperture)\r\n            .setFocalLength(json.focalLength)\r\n            .setIso(json.iso)\r\n            .setShutterSpeed(json.shutterSpeed);\r\n\r\n        if (json.category) {\r\n            const { id, displayName } = json.category;\r\n            const category = new Category(id, displayName);\r\n            imageBuilder.setCategory(category);\r\n        }\r\n\r\n        return imageBuilder.build();\r\n    }\r\n\r\n    hasExif(): boolean {\r\n        return this.aperture !== null \r\n            && this.iso !== null \r\n            && this.shutterSpeed !== null \r\n            && this.focalLength !== null;\r\n    }\r\n\r\n    toExifString(): string {\r\n        if (this.hasExif()) {\r\n            return `ISO: ${this.iso?.toString()}, ${this.shutterSpeed}, ${this.aperture}, ${this.focalLength}`;\r\n        }\r\n        return 'No information'\r\n    }\r\n\r\n    getFormatedDate(): string {\r\n        return this.uploadDate.toLocaleDateString('en-us', {\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric',\r\n        });\r\n    }\r\n\r\n    getUrl(resolutionType: string) {\r\n        if (RESOLUTION_TYPES.includes(resolutionType)) {\r\n            return `http://localhost:8000/image/${this.category.id}/${resolutionType}/${this.id}`;\r\n        }\r\n        return `http://localhost:8000/image/${this.category.id}/medium_res/${this.id}`;\r\n    }\r\n\r\n    isPortrait(): boolean {\r\n        return true;\r\n    }\r\n\r\n    isLandscape(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get category(): Category {\r\n        return this._category;\r\n    }\r\n\r\n    get id(): number {\r\n        return this._id;\r\n    }\r\n\r\n    get uploadDate(): Date {\r\n        return this._uploadDate;\r\n    }\r\n\r\n    set aperture(aperture: string | undefined) {\r\n        this._aperture = aperture;\r\n    }\r\n\r\n    set iso(iso: number | undefined) {\r\n        this._iso = iso;\r\n    }\r\n\r\n    set shutterSpeed(shutterSpeed: string | undefined) {\r\n        this._shutterSpeed = shutterSpeed;\r\n    }\r\n\r\n    set focalLength(focalLength: string | undefined) {\r\n        this._focalLength = focalLength;\r\n    } \r\n\r\n    set category(category: Category) {\r\n        this._category = category;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}