{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\_containers\\\\Recent\\\\Recent.tsx\";\nimport React, { Component } from 'react';\nimport { Button } from '../../UI/Button';\nimport ImageService from '../../../helper/image/ImageService';\nconst NB_IMAGE_PER_FETCH = 5;\nconst MIN_TIME_BETWEEN_FETCH = 1000;\n\nclass Recent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      images: [],\n      error: false,\n      loading: true,\n      canLoad: true,\n      errorMessage: '',\n      nbImagesLoaded: 0\n    };\n  }\n\n  setError(errorMessage) {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  }\n\n  handleFetchError(data) {\n    if (!data) {\n      this.setError('Something unexptected happened. Please try again later.');\n      return true;\n    }\n\n    if (data.error) {\n      this.setError(data.error.message);\n      return true;\n    }\n\n    return false;\n  } // TODO: When fetching new images => set loading to true\n  // TODO: Can load new image every second\n\n\n  async fetchImages(offset) {\n    if (!this.state.canLoad) {\n      return;\n    }\n\n    const imageService = new ImageService();\n\n    try {\n      const {\n        nbImagesLoaded,\n        images\n      } = this.state;\n      const newImages = imageService.getKImagesFromOffset(NB_IMAGE_PER_FETCH, nbImagesLoaded);\n      this.setState({\n        loading: false,\n        error: false,\n        canLoad: false,\n        images: [...images, ...newImages]\n      });\n      setTimeout(this.setState({\n        canLoad: true\n      }), MIN_TIME_BETWEEN_FETCH);\n    } catch (e) {\n      this.setError('Something unexpected happened. Try again later.');\n    }\n  }\n\n  handleScroll() {}\n\n  componentDidMount() {\n    this.fetchImages(0);\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  render() {\n    return React.createElement(Button, {\n      variant: \"classic\",\n      size: \"medium\",\n      onClick: () => this.fetchImages(this.state.nbImagesLoaded),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Load\");\n  }\n\n}\n\nexport default Recent;","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/_containers/Recent/Recent.tsx"],"names":["React","Component","Button","ImageService","NB_IMAGE_PER_FETCH","MIN_TIME_BETWEEN_FETCH","Recent","state","images","error","loading","canLoad","errorMessage","nbImagesLoaded","setError","setState","handleFetchError","data","message","fetchImages","offset","imageService","newImages","getKImagesFromOffset","setTimeout","e","handleScroll","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAGA,OAAOC,YAAP,MAAyB,oCAAzB;AAWA,MAAMC,kBAA0B,GAAG,CAAnC;AACA,MAAMC,sBAA8B,GAAG,IAAvC;;AAEA,MAAMC,MAAN,SAAqBL,SAArB,CAAgD;AAAA;AAAA;AAAA,SAC5CM,KAD4C,GACpC;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,KAAK,EAAE,KAFH;AAGJC,MAAAA,OAAO,EAAE,IAHL;AAIJC,MAAAA,OAAO,EAAE,IAJL;AAKJC,MAAAA,YAAY,EAAE,EALV;AAMJC,MAAAA,cAAc,EAAE;AANZ,KADoC;AAAA;;AAU5CC,EAAAA,QAAQ,CAACF,YAAD,EAAuB;AAC3B,SAAKG,QAAL,CAAc;AAAEN,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAAd;AACH;;AAEDM,EAAAA,gBAAgB,CAACC,IAAD,EAA4B;AACxC,QAAI,CAACA,IAAL,EAAW;AACP,WAAKH,QAAL,CAAc,yDAAd;AACA,aAAO,IAAP;AACH;;AACD,QAAIG,IAAI,CAACR,KAAT,EAAgB;AACZ,WAAKK,QAAL,CAAcG,IAAI,CAACR,KAAL,CAAWS,OAAzB;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAxB2C,CA0B5C;AACA;;;AACA,QAAMC,WAAN,CAAkBC,MAAlB,EAAkC;AAC9B,QAAI,CAAC,KAAKb,KAAL,CAAWI,OAAhB,EAAyB;AACrB;AACH;;AACD,UAAMU,YAAY,GAAG,IAAIlB,YAAJ,EAArB;;AACA,QAAI;AACA,YAAM;AAAEU,QAAAA,cAAF;AAAkBL,QAAAA;AAAlB,UAA6B,KAAKD,KAAxC;AACA,YAAMe,SAAkB,GAAGD,YAAY,CAACE,oBAAb,CAAkCnB,kBAAlC,EAAsDS,cAAtD,CAA3B;AAEA,WAAKE,QAAL,CAAc;AAAEL,QAAAA,OAAO,EAAE,KAAX;AAAkBD,QAAAA,KAAK,EAAE,KAAzB;AAAgCE,QAAAA,OAAO,EAAE,KAAzC;AAAgDH,QAAAA,MAAM,EAAE,CAAC,GAAGA,MAAJ,EAAY,GAAGc,SAAf;AAAxD,OAAd;AACAE,MAAAA,UAAU,CAAC,KAAKT,QAAL,CAAc;AAAEJ,QAAAA,OAAO,EAAE;AAAX,OAAd,CAAD,EAAmCN,sBAAnC,CAAV;AACH,KAND,CAME,OAAOoB,CAAP,EAAU;AACR,WAAKX,QAAL,CAAc,iDAAd;AACH;AACJ;;AAEDY,EAAAA,YAAY,GAAG,CAEd;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,WAAL,CAAiB,CAAjB;AACAS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKH,YAAvC;AACH;;AAEDI,EAAAA,oBAAoB,GAAG;AACnBF,IAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKL,YAA1C;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,IAAI,EAAC,QAA/B;AAAwC,MAAA,OAAO,EAAE,MAAM,KAAKb,WAAL,CAAiB,KAAKZ,KAAL,CAAWM,cAA5B,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;;AA7D2C;;AAgEhD,eAAeP,MAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button } from '../../UI/Button';\r\nimport HttpRequest from '../../../helper/http/HttpRequest';\r\nimport Image from '../../../helper/image/Image';\r\nimport ImageService from '../../../helper/image/ImageService';\r\n\r\ninterface RecentState {\r\n    images: Image[];\r\n    error: boolean;\r\n    loading: boolean;\r\n    errorMessage: string;\r\n    nbImagesLoaded: number;\r\n    canLoad: boolean;\r\n}\r\n\r\nconst NB_IMAGE_PER_FETCH: number = 5;\r\nconst MIN_TIME_BETWEEN_FETCH: number = 1000;\r\n\r\nclass Recent extends Component<{}, RecentState> {\r\n    state = {\r\n        images: [],\r\n        error: false,\r\n        loading: true,\r\n        canLoad: true,\r\n        errorMessage: '',\r\n        nbImagesLoaded: 0,\r\n    }\r\n\r\n    setError(errorMessage: string) {\r\n        this.setState({ error: true, loading: false });\r\n    }\r\n\r\n    handleFetchError(data: any | null): boolean {\r\n        if (!data) {\r\n            this.setError('Something unexptected happened. Please try again later.');\r\n            return true;\r\n        }\r\n        if (data.error) {\r\n            this.setError(data.error.message);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // TODO: When fetching new images => set loading to true\r\n    // TODO: Can load new image every second\r\n    async fetchImages(offset: number) {\r\n        if (!this.state.canLoad) {\r\n            return;\r\n        }\r\n        const imageService = new ImageService();\r\n        try {\r\n            const { nbImagesLoaded, images } = this.state;\r\n            const newImages: Image[] = imageService.getKImagesFromOffset(NB_IMAGE_PER_FETCH, nbImagesLoaded);\r\n\r\n            this.setState({ loading: false, error: false, canLoad: false, images: [...images, ...newImages] });\r\n            setTimeout(this.setState({ canLoad: true }), MIN_TIME_BETWEEN_FETCH);\r\n        } catch (e) {\r\n            this.setError('Something unexpected happened. Try again later.');\r\n        }\r\n    }\r\n\r\n    handleScroll() {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchImages(0);\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button variant=\"classic\" size=\"medium\" onClick={() => this.fetchImages(this.state.nbImagesLoaded)}>Load</Button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Recent;"]},"metadata":{},"sourceType":"module"}