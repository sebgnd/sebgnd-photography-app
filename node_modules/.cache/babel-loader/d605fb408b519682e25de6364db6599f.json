{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst pngSignature = 'PNG\\r\\n\\x1a\\n';\nconst pngImageHeaderChunkName = 'IHDR'; // Used to detect \"fried\" png's: http://www.jongware.com/pngdefry.html\n\nconst pngFriedChunkName = 'CgBI';\nexports.PNG = {\n  validate(buffer) {\n    if (pngSignature === buffer.toString('ascii', 1, 8)) {\n      let chunkName = buffer.toString('ascii', 12, 16);\n\n      if (chunkName === pngFriedChunkName) {\n        chunkName = buffer.toString('ascii', 28, 32);\n      }\n\n      if (chunkName !== pngImageHeaderChunkName) {\n        throw new TypeError('Invalid PNG');\n      }\n\n      return true;\n    }\n\n    return false;\n  },\n\n  calculate(buffer) {\n    if (buffer.toString('ascii', 12, 16) === pngFriedChunkName) {\n      return {\n        height: buffer.readUInt32BE(36),\n        width: buffer.readUInt32BE(32)\n      };\n    }\n\n    return {\n      height: buffer.readUInt32BE(20),\n      width: buffer.readUInt32BE(16)\n    };\n  }\n\n};","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/node_modules/image-size/dist/types/png.js"],"names":["Object","defineProperty","exports","value","pngSignature","pngImageHeaderChunkName","pngFriedChunkName","PNG","validate","buffer","toString","chunkName","TypeError","calculate","height","readUInt32BE","width"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA,MAAMC,YAAY,GAAG,eAArB;AACA,MAAMC,uBAAuB,GAAG,MAAhC,C,CACA;;AACA,MAAMC,iBAAiB,GAAG,MAA1B;AACAJ,OAAO,CAACK,GAAR,GAAc;AACVC,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACb,QAAIL,YAAY,KAAKK,MAAM,CAACC,QAAP,CAAgB,OAAhB,EAAyB,CAAzB,EAA4B,CAA5B,CAArB,EAAqD;AACjD,UAAIC,SAAS,GAAGF,MAAM,CAACC,QAAP,CAAgB,OAAhB,EAAyB,EAAzB,EAA6B,EAA7B,CAAhB;;AACA,UAAIC,SAAS,KAAKL,iBAAlB,EAAqC;AACjCK,QAAAA,SAAS,GAAGF,MAAM,CAACC,QAAP,CAAgB,OAAhB,EAAyB,EAAzB,EAA6B,EAA7B,CAAZ;AACH;;AACD,UAAIC,SAAS,KAAKN,uBAAlB,EAA2C;AACvC,cAAM,IAAIO,SAAJ,CAAc,aAAd,CAAN;AACH;;AACD,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAbS;;AAcVC,EAAAA,SAAS,CAACJ,MAAD,EAAS;AACd,QAAIA,MAAM,CAACC,QAAP,CAAgB,OAAhB,EAAyB,EAAzB,EAA6B,EAA7B,MAAqCJ,iBAAzC,EAA4D;AACxD,aAAO;AACHQ,QAAAA,MAAM,EAAEL,MAAM,CAACM,YAAP,CAAoB,EAApB,CADL;AAEHC,QAAAA,KAAK,EAAEP,MAAM,CAACM,YAAP,CAAoB,EAApB;AAFJ,OAAP;AAIH;;AACD,WAAO;AACHD,MAAAA,MAAM,EAAEL,MAAM,CAACM,YAAP,CAAoB,EAApB,CADL;AAEHC,MAAAA,KAAK,EAAEP,MAAM,CAACM,YAAP,CAAoB,EAApB;AAFJ,KAAP;AAIH;;AAzBS,CAAd","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst pngSignature = 'PNG\\r\\n\\x1a\\n';\nconst pngImageHeaderChunkName = 'IHDR';\n// Used to detect \"fried\" png's: http://www.jongware.com/pngdefry.html\nconst pngFriedChunkName = 'CgBI';\nexports.PNG = {\n    validate(buffer) {\n        if (pngSignature === buffer.toString('ascii', 1, 8)) {\n            let chunkName = buffer.toString('ascii', 12, 16);\n            if (chunkName === pngFriedChunkName) {\n                chunkName = buffer.toString('ascii', 28, 32);\n            }\n            if (chunkName !== pngImageHeaderChunkName) {\n                throw new TypeError('Invalid PNG');\n            }\n            return true;\n        }\n        return false;\n    },\n    calculate(buffer) {\n        if (buffer.toString('ascii', 12, 16) === pngFriedChunkName) {\n            return {\n                height: buffer.readUInt32BE(36),\n                width: buffer.readUInt32BE(32)\n            };\n        }\n        return {\n            height: buffer.readUInt32BE(20),\n            width: buffer.readUInt32BE(16)\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}