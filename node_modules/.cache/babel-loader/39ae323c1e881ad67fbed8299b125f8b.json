{"ast":null,"code":"import Paths from './Paths';\nimport Jimp from 'jimp';\nexport default class Image {\n  constructor(id = 1, galleryId = 'gallery', uploadDate = new Date(), isThumbnail = false) {\n    this.id = void 0;\n    this.galleryId = void 0;\n    this.thumbnail = void 0;\n    this.aperture = undefined;\n    this.iso = undefined;\n    this.shutterSpeed = undefined;\n    this.focalLength = undefined;\n    this.uploadDate = void 0;\n    this.fullImageUrl = void 0;\n    this.width = 0;\n    this.height = 0;\n    this.id = id;\n    this.uploadDate = uploadDate;\n    this.galleryId = galleryId;\n    this.fullImageUrl = Paths.fullImage(id, galleryId);\n    this.thumbnail = isThumbnail;\n\n    if (galleryId !== 'gallery') {\n      this.setImageSize();\n    }\n  }\n\n  clone() {\n    const newImage = new Image(this.id, this.galleryId, new Date(this.uploadDate), this.thumbnail);\n    newImage.setAperture(this.aperture);\n    newImage.setFocalLength(this.focalLength);\n    newImage.setISO(this.iso);\n    newImage.setShutterSpeed(this.shutterSpeed);\n    return newImage;\n  }\n\n  async setImageSize() {\n    const image = await Jimp.read(this.fullImageUrl);\n    this.width = image.bitmap.width;\n    this.height = image.bitmap.height;\n  }\n\n  setIsThumbnail(thumbnail) {\n    this.thumbnail = thumbnail;\n  }\n\n  isThumbnail() {\n    return this.isThumbnail;\n  }\n\n  getGalleryId() {\n    return this.galleryId;\n  }\n\n  setAperture(aperture) {\n    this.aperture = aperture;\n  }\n\n  setISO(iso) {\n    this.iso = iso;\n  }\n\n  setShutterSpeed(shutterSpeed) {\n    this.shutterSpeed = shutterSpeed;\n  }\n\n  setFocalLength(focalLength) {\n    this.focalLength = focalLength;\n  }\n\n  isPortrait() {\n    return true;\n  }\n\n  isLandscape() {\n    return true;\n  }\n\n  hasExif() {\n    return this.aperture !== null && this.iso !== null && this.shutterSpeed !== null && this.focalLength !== null;\n  }\n\n  toExifString() {\n    if (this.hasExif()) {\n      var _this$iso;\n\n      return `ISO: ${(_this$iso = this.iso) === null || _this$iso === void 0 ? void 0 : _this$iso.toString()}, ${this.shutterSpeed}, ${this.aperture}, ${this.focalLength}`;\n    }\n\n    return 'No information';\n  }\n\n  getFormatedDate() {\n    return this.uploadDate.toLocaleDateString('en-us', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  }\n\n  getId() {\n    return this.id;\n  }\n\n}","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/helper/Image.ts"],"names":["Paths","Jimp","Image","constructor","id","galleryId","uploadDate","Date","isThumbnail","thumbnail","aperture","undefined","iso","shutterSpeed","focalLength","fullImageUrl","width","height","fullImage","setImageSize","clone","newImage","setAperture","setFocalLength","setISO","setShutterSpeed","image","read","bitmap","setIsThumbnail","getGalleryId","isPortrait","isLandscape","hasExif","toExifString","toString","getFormatedDate","toLocaleDateString","year","month","day","getId"],"mappings":"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","sourcesContent":["import Gallery from './Gallery';\r\nimport Paths from './Paths';\r\nimport Jimp from 'jimp';\r\n\r\nexport default class Image {\r\n    private id: number;\r\n    private galleryId: string;\r\n    private thumbnail: boolean;\r\n    \r\n    private aperture: string | undefined = undefined;\r\n    private iso: number | undefined = undefined;\r\n    private shutterSpeed: string | undefined = undefined;\r\n    private focalLength: string | undefined = undefined;\r\n    private uploadDate: Date;\r\n\r\n    private fullImageUrl: string;\r\n    private width: number = 0;\r\n    private height: number = 0;\r\n\r\n    constructor(id: number = 1, galleryId: string = 'gallery', uploadDate: Date = new Date(), isThumbnail: boolean = false) {\r\n        this.id = id;\r\n        this.uploadDate = uploadDate;\r\n        this.galleryId = galleryId;\r\n        this.fullImageUrl = Paths.fullImage(id, galleryId);\r\n        this.thumbnail = isThumbnail;\r\n        if (galleryId !== 'gallery') {\r\n            this.setImageSize();\r\n        }\r\n    }\r\n\r\n    clone() {\r\n        const newImage: Image = new Image(this.id, this.galleryId, new Date(this.uploadDate), this.thumbnail);\r\n\r\n        newImage.setAperture(this.aperture);\r\n        newImage.setFocalLength(this.focalLength);\r\n        newImage.setISO(this.iso);\r\n        newImage.setShutterSpeed(this.shutterSpeed);\r\n\r\n        return newImage;\r\n    }\r\n\r\n    private async setImageSize() {\r\n        const image = await Jimp.read(this.fullImageUrl);\r\n        this.width = image.bitmap.width;\r\n        this.height = image.bitmap.height;\r\n    }\r\n\r\n    setIsThumbnail(thumbnail: boolean) {\r\n        this.thumbnail = thumbnail;\r\n    }\r\n\r\n    isThumbnail() {\r\n        return this.isThumbnail;\r\n    }\r\n\r\n    getGalleryId() {\r\n        return this.galleryId;\r\n    }\r\n\r\n    setAperture(aperture?: string) {\r\n        this.aperture = aperture;\r\n    }\r\n\r\n    setISO(iso?: number) {\r\n        this.iso = iso;\r\n    }\r\n\r\n    setShutterSpeed(shutterSpeed?: string) {\r\n        this.shutterSpeed = shutterSpeed;\r\n    }\r\n\r\n    setFocalLength(focalLength?: string) {\r\n        this.focalLength = focalLength;\r\n    } \r\n\r\n    isPortrait() {\r\n        return true;\r\n    }\r\n\r\n    isLandscape() {\r\n        return true;\r\n    }\r\n\r\n    hasExif() {\r\n        return this.aperture !== null \r\n            && this.iso !== null \r\n            && this.shutterSpeed !== null \r\n            && this.focalLength !== null;\r\n    }\r\n\r\n    toExifString() {\r\n        if (this.hasExif()) {\r\n            return `ISO: ${this.iso?.toString()}, ${this.shutterSpeed}, ${this.aperture}, ${this.focalLength}`;\r\n        }\r\n        return 'No information'\r\n    }\r\n\r\n    getFormatedDate() {\r\n        return this.uploadDate.toLocaleDateString('en-us', {\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric',\r\n        });\r\n    }\r\n\r\n    getId() {\r\n        return this.id;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}