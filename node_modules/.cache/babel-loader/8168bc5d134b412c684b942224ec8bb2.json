{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\reusable\\\\image\\\\recent\\\\RecentImage.tsx\";\nimport React, { Component } from 'react';\nimport Paths from '../../../../data/Paths';\nimport { RecentImageContainer, InfoFlex, ImageContainer, FillerImage, AdaptedImage } from './recent-image-style';\nimport { InlineBlock, FloatLeft, FloatRight, Text, MarginLeft, MarginRight } from '../../regular/style';\nimport { Button } from '../../button';\nimport './image.css';\n\n// TODO: Change imageType to a enum ImageType, overkill ?\n// TODO: Figure out if image is landscape or portrait\n// TODO: Get the right path for the image from files server -> imageSource\nclass RecentImage extends Component {\n  goToGallery(name) {}\n\n  render() {\n    const {\n      image,\n      galleryDisplayName,\n      galleryName\n    } = this.props; // Image information\n\n    const formatedDate = image.getFormatedDate();\n    const id = image.getId().toString();\n    const imageType = image.isPortrait() ? 'portrait' : 'landscape'; // Links to other pages\n\n    const galleryLink = `gallery/${galleryName}`;\n    const imageLink = `viewer/${galleryName}/${id}`;\n    const imageSource = Paths.smallImage();\n    return React.createElement(RecentImageContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(InfoFlex, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(InlineBlock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(FloatLeft, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(MarginLeft, {\n      amount: 50,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"light\",\n      onClick: () => this.goToGallery(this.props.galleryName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Text, {\n      size: \"small\",\n      color: \"#7E7E7E\",\n      weight: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, galleryDisplayName))))), React.createElement(InlineBlock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(FloatRight, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(MarginRight, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Text, {\n      size: \"small\",\n      color: \"#7E7E7E\",\n      weight: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, formatedDate))))), React.createElement(ImageContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, image.isPortrait() && React.createElement(FillerImage, {\n      src: imageSource,\n      alt: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(AdaptedImage, {\n      type: imageType,\n      src: imageSource,\n      alt: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default RecentImage;","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/reusable/image/recent/RecentImage.tsx"],"names":["React","Component","Paths","RecentImageContainer","InfoFlex","ImageContainer","FillerImage","AdaptedImage","InlineBlock","FloatLeft","FloatRight","Text","MarginLeft","MarginRight","Button","RecentImage","goToGallery","name","render","image","galleryDisplayName","galleryName","props","formatedDate","getFormatedDate","id","getId","toString","imageType","isPortrait","galleryLink","imageLink","imageSource","smallImage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Paths from '../../../../data/Paths';\r\nimport Image from './../../../../data/Image';\r\n\r\nimport { RecentImageContainer, InfoFlex, ImageContainer, FillerImage, AdaptedImage } from './recent-image-style';\r\nimport { InlineBlock, FloatLeft, FloatRight, Text, MarginLeft, MarginRight } from '../../regular/style';\r\nimport { Button } from '../../button';\r\n\r\nimport './image.css';\r\n\r\ntype RecentImageProp = {\r\n    // Image information\r\n    image: Image;\r\n\r\n    // Gallery information\r\n    galleryDisplayName: string;\r\n    galleryName: string;\r\n}\r\n\r\n// TODO: Change imageType to a enum ImageType, overkill ?\r\n// TODO: Figure out if image is landscape or portrait\r\n// TODO: Get the right path for the image from files server -> imageSource\r\n\r\nclass RecentImage extends Component<RecentImageProp, {}> {\r\n    goToGallery(name: string) {\r\n\r\n    }\r\n\r\n    render() {\r\n        const { image, galleryDisplayName, galleryName } = this.props;\r\n        // Image information\r\n        const formatedDate = image.getFormatedDate();\r\n        const id = image.getId().toString();\r\n        const imageType = image.isPortrait() ? 'portrait' : 'landscape';\r\n        \r\n        // Links to other pages\r\n        const galleryLink = `gallery/${galleryName}`;\r\n        const imageLink = `viewer/${galleryName}/${id}`;\r\n        const imageSource = Paths.smallImage();\r\n        \r\n        return (\r\n            <RecentImageContainer>\r\n                <InfoFlex>\r\n                    <InlineBlock>\r\n                        <FloatLeft>\r\n                            <MarginLeft amount={50}>\r\n                                <Button variant=\"light\" onClick={() => this.goToGallery(this.props.galleryName)}>\r\n                                    <Text size=\"small\" color=\"#7E7E7E\" weight=\"bold\">{galleryDisplayName}</Text>\r\n                                </Button>\r\n                            </MarginLeft>\r\n                        </FloatLeft>\r\n                    </InlineBlock>\r\n                    <InlineBlock>\r\n                        <FloatRight>\r\n                            <MarginRight>\r\n                                <Text size=\"small\" color=\"#7E7E7E\" weight=\"bold\">{formatedDate}</Text>\r\n                            </MarginRight>\r\n                        </FloatRight>\r\n                    </InlineBlock>\r\n                </InfoFlex>\r\n                \r\n                <ImageContainer>\r\n                    { image.isPortrait() && (\r\n                        <FillerImage src={imageSource} alt={id} />\r\n                    )}\r\n                    <AdaptedImage type={imageType} src={imageSource} alt={id} />\r\n                </ImageContainer>\r\n            </RecentImageContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecentImage;"]},"metadata":{},"sourceType":"module"}