{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\"); // fs.promises polyfill for node 8.x\n\n\nif (!('promises' in fs)) {\n  class FileHandle {\n    constructor(fd) {\n      this.fd = fd;\n    }\n\n    stat() {\n      return new Promise((resolve, reject) => {\n        fs.fstat(this.fd, (err, stats) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(stats);\n          }\n        });\n      });\n    }\n\n    read(buffer, offset, length, position) {\n      return new Promise((resolve, reject) => {\n        fs.read(this.fd, buffer, offset, length, position, err => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n\n    close() {\n      return new Promise((resolve, reject) => {\n        fs.close(this.fd, err => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n\n  }\n\n  Object.defineProperty(fs, 'promises', {\n    value: {\n      open: (filepath, flags) => new Promise((resolve, reject) => {\n        fs.open(filepath, flags, (err, fd) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(new FileHandle(fd));\n          }\n        });\n      })\n    },\n    writable: false\n  });\n}","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/node_modules/image-size/dist/fs.promises.js"],"names":["Object","defineProperty","exports","value","fs","require","FileHandle","constructor","fd","stat","Promise","resolve","reject","fstat","err","stats","read","buffer","offset","length","position","close","open","filepath","flags","writable"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB,C,CACA;;;AACA,IAAI,EAAE,cAAcD,EAAhB,CAAJ,EAAyB;AACrB,QAAME,UAAN,CAAiB;AACbC,IAAAA,WAAW,CAACC,EAAD,EAAK;AACZ,WAAKA,EAAL,GAAUA,EAAV;AACH;;AACDC,IAAAA,IAAI,GAAG;AACH,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCR,QAAAA,EAAE,CAACS,KAAH,CAAS,KAAKL,EAAd,EAAkB,CAACM,GAAD,EAAMC,KAAN,KAAgB;AAC9B,cAAID,GAAJ,EAAS;AACLF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACH,WAFD,MAGK;AACDH,YAAAA,OAAO,CAACI,KAAD,CAAP;AACH;AACJ,SAPD;AAQH,OATM,CAAP;AAUH;;AACDC,IAAAA,IAAI,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAmC;AACnC,aAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCR,QAAAA,EAAE,CAACY,IAAH,CAAQ,KAAKR,EAAb,EAAiBS,MAAjB,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCC,QAAzC,EAAoDN,GAAD,IAAS;AACxD,cAAIA,GAAJ,EAAS;AACLF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACH,WAFD,MAGK;AACDH,YAAAA,OAAO;AACV;AACJ,SAPD;AAQH,OATM,CAAP;AAUH;;AACDU,IAAAA,KAAK,GAAG;AACJ,aAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCR,QAAAA,EAAE,CAACiB,KAAH,CAAS,KAAKb,EAAd,EAAmBM,GAAD,IAAS;AACvB,cAAIA,GAAJ,EAAS;AACLF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACH,WAFD,MAGK;AACDH,YAAAA,OAAO;AACV;AACJ,SAPD;AAQH,OATM,CAAP;AAUH;;AAvCY;;AAyCjBX,EAAAA,MAAM,CAACC,cAAP,CAAsBG,EAAtB,EAA0B,UAA1B,EAAsC;AAClCD,IAAAA,KAAK,EAAE;AACHmB,MAAAA,IAAI,EAAE,CAACC,QAAD,EAAWC,KAAX,KAAsB,IAAId,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACzDR,QAAAA,EAAE,CAACkB,IAAH,CAAQC,QAAR,EAAkBC,KAAlB,EAAyB,CAACV,GAAD,EAAMN,EAAN,KAAa;AAClC,cAAIM,GAAJ,EAAS;AACLF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACH,WAFD,MAGK;AACDH,YAAAA,OAAO,CAAC,IAAIL,UAAJ,CAAeE,EAAf,CAAD,CAAP;AACH;AACJ,SAPD;AAQH,OAT2B;AADzB,KAD2B;AAalCiB,IAAAA,QAAQ,EAAE;AAbwB,GAAtC;AAeH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\n// fs.promises polyfill for node 8.x\nif (!('promises' in fs)) {\n    class FileHandle {\n        constructor(fd) {\n            this.fd = fd;\n        }\n        stat() {\n            return new Promise((resolve, reject) => {\n                fs.fstat(this.fd, (err, stats) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(stats);\n                    }\n                });\n            });\n        }\n        read(buffer, offset, length, position) {\n            return new Promise((resolve, reject) => {\n                fs.read(this.fd, buffer, offset, length, position, (err) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve();\n                    }\n                });\n            });\n        }\n        close() {\n            return new Promise((resolve, reject) => {\n                fs.close(this.fd, (err) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve();\n                    }\n                });\n            });\n        }\n    }\n    Object.defineProperty(fs, 'promises', {\n        value: {\n            open: (filepath, flags) => (new Promise((resolve, reject) => {\n                fs.open(filepath, flags, (err, fd) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(new FileHandle(fd));\n                    }\n                });\n            })),\n        },\n        writable: false\n    });\n}\n"]},"metadata":{},"sourceType":"script"}