{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\reusable\\\\form\\\\form\\\\Form.tsx\";\nimport React, { Component, createContext } from 'react';\nimport TextField from '../text-field/TextField';\nexport const FormContext = createContext(undefined);\n\nconst notEmpty = content => {\n  if (content.trim() === \"\") {\n    return 'This field cannot be empty.';\n  }\n\n  return null;\n};\n\nconst maxLength = (content, length) => {\n  if (content.trim().length > length) {\n    return `This field cannot be longer than ${length} characters`;\n  }\n\n  return null;\n};\n\nconst withoutSpecialCharacter = content => {\n  const acceptedCharacters = /^[A-Za-z0-9 ]+$/;\n\n  if (!acceptedCharacters.test(content.trim())) {\n    return 'This field cannot contain special characters';\n  }\n\n  return null;\n};\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    const errors = new Map();\n    this.props.fields.forEach(field => {\n      errors.set(field.id, null);\n    });\n    this.state = {\n      values: new Map(),\n      submitted: false,\n      errors\n    };\n    this.setValue = this.setValue.bind(this);\n  }\n\n  getMethod() {\n    const {\n      method\n    } = this.props;\n\n    if (method.toLowerCase() == 'post' || method.toLowerCase() == 'get') {\n      return method.toUpperCase();\n    }\n\n    return 'POST';\n  }\n\n  setValue(key, value) {\n    this.setState({\n      values: new Map(this.state.values).set(key, value)\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  validate(value, rules) {\n    let error = null;\n\n    if (rules.maxLength) {\n      error = maxLength(value, rules.maxLength);\n    } else if (rules.notEmpty) {\n      error = notEmpty(value);\n    } else if (rules.withoutSpecialCharacters) {\n      error = withoutSpecialCharacter(value);\n    }\n\n    return error;\n  }\n\n  handleBlur(event) {\n    const {\n      value,\n      name\n    } = event.currentTarget;\n    const field = this.props.fields.find(field => field.id === name);\n\n    if (field) {\n      const error = this.validate(value, field.rules);\n      this.setState({\n        errors: new Map(this.state.errors).set(name, error)\n      });\n    }\n  }\n\n  render() {\n    const context = {\n      state: this.state,\n      setValue: this.setValue\n    };\n    return React.createElement(FormContext.Provider, {\n      value: context,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: e => this.handleSubmit(e),\n      action: this.props.action,\n      method: this.getMethod(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.props.fields.map(field => {\n      return React.createElement(TextField, {\n        onBlur: e => this.handleBlur,\n        key: `${field.id}-input`,\n        errorMessage: this.state.errors.get(field.id),\n        id: field.id,\n        type: field.fieldType,\n        label: field.label,\n        placeholder: field.placeholder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      });\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/reusable/form/form/Form.tsx"],"names":["React","Component","createContext","TextField","FormContext","undefined","notEmpty","content","trim","maxLength","length","withoutSpecialCharacter","acceptedCharacters","test","Form","constructor","props","errors","Map","fields","forEach","field","set","id","state","values","submitted","setValue","bind","getMethod","method","toLowerCase","toUpperCase","key","value","setState","handleSubmit","event","preventDefault","validate","rules","error","withoutSpecialCharacters","handleBlur","name","currentTarget","find","render","context","e","action","map","get","fieldType","label","placeholder"],"mappings":"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","sourcesContent":["import React, { Component, createContext, FormEvent } from 'react';\r\nimport TextField, { TextFieldEvent } from '../text-field/TextField';\r\n\r\ninterface IFormProps {\r\n    action: string;\r\n    method: string;\r\n    fields: IField[];\r\n    onSubmit?(): void;\r\n}\r\n\r\ninterface IFormState {\r\n    values: Map<string, string>;\r\n    errors: Map<string, string | null>;\r\n    submitted: boolean;\r\n}\r\n\r\nexport interface IFormContext {\r\n    state: IFormState;\r\n    setValue(key: string, value: string): void;\r\n}\r\n\r\nexport interface IRule {\r\n    maxLength?: number;\r\n    notEmpty?: boolean;\r\n    withoutSpecialCharacters?: boolean;\r\n}\r\n\r\nexport interface IField {\r\n    id: string;\r\n    fieldType: string;\r\n    rules: IRule;\r\n    sameAs?: string;\r\n    label?: string;\r\n    placeholder?: string;\r\n    hideContent?: boolean;\r\n    required?: boolean;\r\n}\r\n\r\nexport const FormContext = createContext<IFormContext | undefined>(undefined);\r\n\r\nconst notEmpty = (content: string): string | null => {\r\n    if (content.trim() === \"\") {\r\n        return 'This field cannot be empty.';\r\n    }\r\n    return null;\r\n}\r\n\r\nconst maxLength = (content: string, length: number): string | null => {\r\n    if (content.trim().length > length) {\r\n        return `This field cannot be longer than ${length} characters`;\r\n    }\r\n    return null;\r\n}\r\n\r\nconst withoutSpecialCharacter = (content: string): string | null => {\r\n    const acceptedCharacters: RegExp = /^[A-Za-z0-9 ]+$/;\r\n    if (!acceptedCharacters.test(content.trim())) {\r\n        return 'This field cannot contain special characters';\r\n    }\r\n    return null;\r\n}\r\n\r\nclass Form extends Component<IFormProps, IFormState> {\r\n    constructor(props: IFormProps) {\r\n        super(props);\r\n        \r\n        const errors = new Map<string, string | null>();\r\n        this.props.fields.forEach((field: IField) => {\r\n            errors.set(field.id, null);\r\n        })\r\n\r\n        this.state = {\r\n            values: new Map<string, string>(),\r\n            submitted: false,\r\n            errors\r\n        };\r\n        this.setValue = this.setValue.bind(this);\r\n    }\r\n\r\n    getMethod() {\r\n        const { method } = this.props;\r\n        if (method.toLowerCase() == 'post' || method.toLowerCase() == 'get') {\r\n            return method.toUpperCase();\r\n        }\r\n        return 'POST';\r\n    }\r\n\r\n    setValue(key: string, value: string) {\r\n        this.setState({ values: new Map<string, string>(this.state.values).set(key, value) });\r\n    }\r\n\r\n    handleSubmit(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    validate(value: string, rules: IRule): string | null {\r\n        let error: string | null = null;\r\n        if (rules.maxLength) {\r\n            error = maxLength(value, rules.maxLength);\r\n        } else if (rules.notEmpty) {\r\n            error = notEmpty(value);\r\n        } else if (rules.withoutSpecialCharacters) {\r\n            error = withoutSpecialCharacter(value);\r\n        }\r\n        return error;\r\n    }\r\n\r\n    handleBlur(event: TextFieldEvent) {\r\n        const { value, name } = event.currentTarget;\r\n        const field: IField | undefined = this.props.fields.find(field => field.id === name);\r\n\r\n        if (field) {\r\n            const error: string | null = this.validate(value, field.rules);\r\n            this.setState({ errors: new Map<string, string | null>(this.state.errors).set(name, error) });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const context: IFormContext = {\r\n            state: this.state,\r\n            setValue: this.setValue\r\n        }\r\n        return (\r\n            <FormContext.Provider value={context}>\r\n                <form onSubmit={(e: FormEvent<HTMLFormElement>) => this.handleSubmit(e)} action={this.props.action} method={this.getMethod()}>\r\n                    {this.props.fields.map((field: IField) => {\r\n                        return <TextField onBlur={(e: TextFieldEvent) => this.handleBlur} key={`${field.id}-input`} errorMessage={this.state.errors.get(field.id)} id={field.id} type={field.fieldType} label={field.label} placeholder={field.placeholder} />\r\n                    })}\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </FormContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}