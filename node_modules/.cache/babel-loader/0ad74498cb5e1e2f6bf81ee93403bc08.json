{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TYPE_ICON = 1;\n/**\n * ICON Header\n *\n * | Offset | Size | Purpose |\n * | 0\t    | 2    | Reserved. Must always be 0.  |\n * | 2      | 2    | Image type: 1 for icon (.ICO) image, 2 for cursor (.CUR) image. Other values are invalid. |\n * | 4      | 2    | Number of images in the file. |\n *\n */\n\nconst SIZE_HEADER = 2 + 2 + 2; // 6\n\n/**\n * Image Entry\n *\n * | Offset | Size | Purpose |\n * | 0\t    | 1    | Image width in pixels. Can be any number between 0 and 255. Value 0 means width is 256 pixels. |\n * | 1      | 1    | Image height in pixels. Can be any number between 0 and 255. Value 0 means height is 256 pixels. |\n * | 2      | 1    | Number of colors in the color palette. Should be 0 if the image does not use a color palette. |\n * | 3      | 1    | Reserved. Should be 0. |\n * | 4      | 2    | ICO format: Color planes. Should be 0 or 1. |\n * |        |      | CUR format: The horizontal coordinates of the hotspot in number of pixels from the left. |\n * | 6      | 2    | ICO format: Bits per pixel. |\n * |        |      | CUR format: The vertical coordinates of the hotspot in number of pixels from the top. |\n * | 8      | 4    | The size of the image's data in bytes |\n * | 12     | 4    | The offset of BMP or PNG data from the beginning of the ICO/CUR file |\n *\n */\n\nconst SIZE_IMAGE_ENTRY = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4; // 16\n\nfunction getSizeFromOffset(buffer, offset) {\n  const value = buffer.readUInt8(offset);\n  return value === 0 ? 256 : value;\n}\n\nfunction getImageSize(buffer, imageIndex) {\n  const offset = SIZE_HEADER + imageIndex * SIZE_IMAGE_ENTRY;\n  return {\n    height: getSizeFromOffset(buffer, offset + 1),\n    width: getSizeFromOffset(buffer, offset)\n  };\n}\n\nexports.ICO = {\n  validate(buffer) {\n    if (buffer.readUInt16LE(0) !== 0) {\n      return false;\n    }\n\n    return buffer.readUInt16LE(2) === TYPE_ICON;\n  },\n\n  calculate(buffer) {\n    const nbImages = buffer.readUInt16LE(4);\n    const imageSize = getImageSize(buffer, 0);\n\n    if (nbImages === 1) {\n      return imageSize;\n    }\n\n    const imgs = [imageSize];\n\n    for (let imageIndex = 1; imageIndex < nbImages; imageIndex += 1) {\n      imgs.push(getImageSize(buffer, imageIndex));\n    }\n\n    const result = {\n      height: imageSize.height,\n      images: imgs,\n      width: imageSize.width\n    };\n    return result;\n  }\n\n};","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/node_modules/image-size/dist/types/ico.js"],"names":["Object","defineProperty","exports","value","TYPE_ICON","SIZE_HEADER","SIZE_IMAGE_ENTRY","getSizeFromOffset","buffer","offset","readUInt8","getImageSize","imageIndex","height","width","ICO","validate","readUInt16LE","calculate","nbImages","imageSize","imgs","push","result","images"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA,MAAMC,SAAS,GAAG,CAAlB;AACA;;;;;;;;;;AASA,MAAMC,WAAW,GAAG,IAAI,CAAJ,GAAQ,CAA5B,C,CAA+B;;AAC/B;;;;;;;;;;;;;;;;;AAgBA,MAAMC,gBAAgB,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAY,CAAZ,GAAgB,CAAhB,GAAoB,CAApB,GAAwB,CAAxB,GAA4B,CAArD,C,CAAwD;;AACxD,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,MAAnC,EAA2C;AACvC,QAAMN,KAAK,GAAGK,MAAM,CAACE,SAAP,CAAiBD,MAAjB,CAAd;AACA,SAAON,KAAK,KAAK,CAAV,GAAc,GAAd,GAAoBA,KAA3B;AACH;;AACD,SAASQ,YAAT,CAAsBH,MAAtB,EAA8BI,UAA9B,EAA0C;AACtC,QAAMH,MAAM,GAAGJ,WAAW,GAAIO,UAAU,GAAGN,gBAA3C;AACA,SAAO;AACHO,IAAAA,MAAM,EAAEN,iBAAiB,CAACC,MAAD,EAASC,MAAM,GAAG,CAAlB,CADtB;AAEHK,IAAAA,KAAK,EAAEP,iBAAiB,CAACC,MAAD,EAASC,MAAT;AAFrB,GAAP;AAIH;;AACDP,OAAO,CAACa,GAAR,GAAc;AACVC,EAAAA,QAAQ,CAACR,MAAD,EAAS;AACb,QAAIA,MAAM,CAACS,YAAP,CAAoB,CAApB,MAA2B,CAA/B,EAAkC;AAC9B,aAAO,KAAP;AACH;;AACD,WAAOT,MAAM,CAACS,YAAP,CAAoB,CAApB,MAA2Bb,SAAlC;AACH,GANS;;AAOVc,EAAAA,SAAS,CAACV,MAAD,EAAS;AACd,UAAMW,QAAQ,GAAGX,MAAM,CAACS,YAAP,CAAoB,CAApB,CAAjB;AACA,UAAMG,SAAS,GAAGT,YAAY,CAACH,MAAD,EAAS,CAAT,CAA9B;;AACA,QAAIW,QAAQ,KAAK,CAAjB,EAAoB;AAChB,aAAOC,SAAP;AACH;;AACD,UAAMC,IAAI,GAAG,CAACD,SAAD,CAAb;;AACA,SAAK,IAAIR,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGO,QAAtC,EAAgDP,UAAU,IAAI,CAA9D,EAAiE;AAC7DS,MAAAA,IAAI,CAACC,IAAL,CAAUX,YAAY,CAACH,MAAD,EAASI,UAAT,CAAtB;AACH;;AACD,UAAMW,MAAM,GAAG;AACXV,MAAAA,MAAM,EAAEO,SAAS,CAACP,MADP;AAEXW,MAAAA,MAAM,EAAEH,IAFG;AAGXP,MAAAA,KAAK,EAAEM,SAAS,CAACN;AAHN,KAAf;AAKA,WAAOS,MAAP;AACH;;AAvBS,CAAd","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst TYPE_ICON = 1;\n/**\n * ICON Header\n *\n * | Offset | Size | Purpose |\n * | 0\t    | 2    | Reserved. Must always be 0.  |\n * | 2      | 2    | Image type: 1 for icon (.ICO) image, 2 for cursor (.CUR) image. Other values are invalid. |\n * | 4      | 2    | Number of images in the file. |\n *\n */\nconst SIZE_HEADER = 2 + 2 + 2; // 6\n/**\n * Image Entry\n *\n * | Offset | Size | Purpose |\n * | 0\t    | 1    | Image width in pixels. Can be any number between 0 and 255. Value 0 means width is 256 pixels. |\n * | 1      | 1    | Image height in pixels. Can be any number between 0 and 255. Value 0 means height is 256 pixels. |\n * | 2      | 1    | Number of colors in the color palette. Should be 0 if the image does not use a color palette. |\n * | 3      | 1    | Reserved. Should be 0. |\n * | 4      | 2    | ICO format: Color planes. Should be 0 or 1. |\n * |        |      | CUR format: The horizontal coordinates of the hotspot in number of pixels from the left. |\n * | 6      | 2    | ICO format: Bits per pixel. |\n * |        |      | CUR format: The vertical coordinates of the hotspot in number of pixels from the top. |\n * | 8      | 4    | The size of the image's data in bytes |\n * | 12     | 4    | The offset of BMP or PNG data from the beginning of the ICO/CUR file |\n *\n */\nconst SIZE_IMAGE_ENTRY = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4; // 16\nfunction getSizeFromOffset(buffer, offset) {\n    const value = buffer.readUInt8(offset);\n    return value === 0 ? 256 : value;\n}\nfunction getImageSize(buffer, imageIndex) {\n    const offset = SIZE_HEADER + (imageIndex * SIZE_IMAGE_ENTRY);\n    return {\n        height: getSizeFromOffset(buffer, offset + 1),\n        width: getSizeFromOffset(buffer, offset)\n    };\n}\nexports.ICO = {\n    validate(buffer) {\n        if (buffer.readUInt16LE(0) !== 0) {\n            return false;\n        }\n        return buffer.readUInt16LE(2) === TYPE_ICON;\n    },\n    calculate(buffer) {\n        const nbImages = buffer.readUInt16LE(4);\n        const imageSize = getImageSize(buffer, 0);\n        if (nbImages === 1) {\n            return imageSize;\n        }\n        const imgs = [imageSize];\n        for (let imageIndex = 1; imageIndex < nbImages; imageIndex += 1) {\n            imgs.push(getImageSize(buffer, imageIndex));\n        }\n        const result = {\n            height: imageSize.height,\n            images: imgs,\n            width: imageSize.width\n        };\n        return result;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}