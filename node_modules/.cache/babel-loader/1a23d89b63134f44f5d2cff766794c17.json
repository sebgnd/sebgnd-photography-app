{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\reusable\\\\image\\\\recent\\\\RecentImage.tsx\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Paths from '../../../../data/Paths';\nimport { RecentImageContainer, InfoFlex, ImageContainer, FillerImage, AdaptedImage } from './recent-image-style';\nimport { InlineBlock, FloatLeft, FloatRight, Text, MarginLeft, MarginRight } from '../../regular/style';\nimport { Button } from '../../button';\n\n// TODO: Change imageType to a enum ImageType, overkill ?\n// TODO: Figure out if image is landscape or portrait\n// TODO: Get the right path for the image from files server -> imageSource\nclass RecentImage extends Component {\n  goToGallery(name) {\n    const galleryLink = `gallery/${name}`;\n    this.props.history.push(galleryLink);\n  }\n\n  goToImage(id, fromGallery) {\n    const imageLink = `viewer/${fromGallery}/${id.toString()}`;\n    this.props.history.push(imageLink);\n  }\n\n  render() {\n    const {\n      image,\n      galleryDisplayName,\n      galleryName\n    } = this.props; // Image information\n\n    const formatedDate = image.getFormatedDate();\n    const id = image.getId().toString();\n    const imageType = image.isPortrait() ? 'portrait' : 'landscape'; // Links to other pages\n\n    const galleryLink = `gallery/${galleryName}`;\n    const imageLink = `viewer/${galleryName}/${id}`;\n    const imageSource = Paths.smallImage();\n    return React.createElement(RecentImageContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(InfoFlex, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(InlineBlock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(FloatLeft, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(MarginLeft, {\n      amount: 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"light\",\n      size: \"small\",\n      onClick: () => this.goToGallery(galleryName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, galleryDisplayName)))), React.createElement(InlineBlock, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(FloatRight, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(MarginRight, {\n      amount: 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Text, {\n      size: \"small\",\n      color: \"#7E7E7E\",\n      weight: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, formatedDate))))), React.createElement(ImageContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(ButtonContainer, {\n      onClick: () => this.goToImage(image.getId(), galleryName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, image.isPortrait() && React.createElement(FillerImage, {\n      src: imageSource,\n      alt: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(AdaptedImage, {\n      type: imageType,\n      src: imageSource,\n      alt: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withRouter(RecentImage);","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/reusable/image/recent/RecentImage.tsx"],"names":["React","Component","withRouter","Paths","RecentImageContainer","InfoFlex","ImageContainer","FillerImage","AdaptedImage","InlineBlock","FloatLeft","FloatRight","Text","MarginLeft","MarginRight","Button","RecentImage","goToGallery","name","galleryLink","props","history","push","goToImage","id","fromGallery","imageLink","toString","render","image","galleryDisplayName","galleryName","formatedDate","getFormatedDate","getId","imageType","isPortrait","imageSource","smallImage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport Paths from '../../../../data/Paths';\r\nimport Image from './../../../../data/Image';\r\n\r\nimport { RecentImageContainer, InfoFlex, ImageContainer, FillerImage, AdaptedImage } from './recent-image-style';\r\nimport { InlineBlock, FloatLeft, FloatRight, Text, MarginLeft, MarginRight } from '../../regular/style';\r\nimport { Button } from '../../button';\r\n\r\ntype RecentImageProp = RouteComponentProps & {\r\n    // Image information\r\n    image: Image;\r\n\r\n    // Gallery information\r\n    galleryDisplayName: string;\r\n    galleryName: string;\r\n}\r\n\r\n// TODO: Change imageType to a enum ImageType, overkill ?\r\n// TODO: Figure out if image is landscape or portrait\r\n// TODO: Get the right path for the image from files server -> imageSource\r\n\r\nclass RecentImage extends Component<RecentImageProp, {}> {\r\n    goToGallery(name: string) {\r\n        const galleryLink = `gallery/${name}`;\r\n        this.props.history.push(galleryLink);\r\n    }\r\n\r\n    goToImage(id: number, fromGallery: string) {\r\n        const imageLink = `viewer/${fromGallery}/${id.toString()}`;\r\n        this.props.history.push(imageLink);\r\n    }\r\n\r\n    render() {\r\n        const { image, galleryDisplayName, galleryName } = this.props;\r\n        // Image information\r\n        const formatedDate = image.getFormatedDate();\r\n        const id = image.getId().toString();\r\n        const imageType = image.isPortrait() ? 'portrait' : 'landscape';\r\n        \r\n        // Links to other pages\r\n        const galleryLink = `gallery/${galleryName}`;\r\n        const imageLink = `viewer/${galleryName}/${id}`;\r\n        const imageSource = Paths.smallImage();\r\n        \r\n        return (\r\n            <RecentImageContainer>\r\n                <InfoFlex>\r\n                    <InlineBlock>\r\n                        <FloatLeft>\r\n                            <MarginLeft amount={20}>\r\n                                <Button variant=\"light\" size=\"small\" onClick={() => this.goToGallery(galleryName)}>{galleryDisplayName}</Button>\r\n                            </MarginLeft>\r\n                        </FloatLeft>\r\n                    </InlineBlock>\r\n                    <InlineBlock>\r\n                        <FloatRight>\r\n                            <MarginRight amount={20}>\r\n                                <Text size=\"small\" color=\"#7E7E7E\" weight=\"bold\">{formatedDate}</Text>\r\n                            </MarginRight>\r\n                        </FloatRight>\r\n                    </InlineBlock>\r\n                </InfoFlex>\r\n                \r\n                <ImageContainer>\r\n                    <ButtonContainer onClick={() => this.goToImage(image.getId(), galleryName)}>\r\n                        { image.isPortrait() && (\r\n                            <FillerImage src={imageSource} alt={id} />\r\n                        )}\r\n                        <AdaptedImage type={imageType} src={imageSource} alt={id} />\r\n                    </ButtonContainer>\r\n                </ImageContainer>\r\n            </RecentImageContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(RecentImage);"]},"metadata":{},"sourceType":"module"}