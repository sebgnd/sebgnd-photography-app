{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * ICNS Header\n *\n * | Offset | Size | Purpose                                                |\n * | 0\t    | 4    | Magic literal, must be \"icns\" (0x69, 0x63, 0x6e, 0x73) |\n * | 4      | 4    | Length of file, in bytes, msb first.                   |\n *\n */\n\nconst SIZE_HEADER = 4 + 4; // 8\n\nconst FILE_LENGTH_OFFSET = 4; // MSB => BIG ENDIAN\n\n/**\n * Image Entry\n *\n * | Offset | Size | Purpose                                                          |\n * | 0\t    | 4    | Icon type, see OSType below.                                     |\n * | 4      | 4    | Length of data, in bytes (including type and length), msb first. |\n * | 8      | n    | Icon data                                                        |\n */\n\nconst ENTRY_LENGTH_OFFSET = 4; // MSB => BIG ENDIAN\n\n/* tslint:disable:object-literal-sort-keys */\n\nconst ICON_TYPE_SIZE = {\n  ICON: 32,\n  'ICN#': 32,\n  // m => 16 x 16\n  'icm#': 16,\n  icm4: 16,\n  icm8: 16,\n  // s => 16 x 16\n  'ics#': 16,\n  ics4: 16,\n  ics8: 16,\n  is32: 16,\n  s8mk: 16,\n  icp4: 16,\n  // l => 32 x 32\n  icl4: 32,\n  icl8: 32,\n  il32: 32,\n  l8mk: 32,\n  icp5: 32,\n  ic11: 32,\n  // h => 48 x 48\n  ich4: 48,\n  ich8: 48,\n  ih32: 48,\n  h8mk: 48,\n  // . => 64 x 64\n  icp6: 64,\n  ic12: 32,\n  // t => 128 x 128\n  it32: 128,\n  t8mk: 128,\n  ic07: 128,\n  // . => 256 x 256\n  ic08: 256,\n  ic13: 256,\n  // . => 512 x 512\n  ic09: 512,\n  ic14: 512,\n  // . => 1024 x 1024\n  ic10: 1024\n};\n/* tslint:enable:object-literal-sort-keys */\n\nfunction readImageHeader(buffer, imageOffset) {\n  const imageLengthOffset = imageOffset + ENTRY_LENGTH_OFFSET;\n  return [buffer.toString('ascii', imageOffset, imageLengthOffset), buffer.readUInt32BE(imageLengthOffset)];\n}\n\nfunction getImageSize(type) {\n  const size = ICON_TYPE_SIZE[type];\n  return {\n    width: size,\n    height: size,\n    type\n  };\n}\n\nexports.ICNS = {\n  validate(buffer) {\n    return 'icns' === buffer.toString('ascii', 0, 4);\n  },\n\n  calculate(buffer) {\n    const bufferLength = buffer.length;\n    const fileLength = buffer.readUInt32BE(FILE_LENGTH_OFFSET);\n    let imageOffset = SIZE_HEADER;\n    let imageHeader = readImageHeader(buffer, imageOffset);\n    let imageSize = getImageSize(imageHeader[0]);\n    imageOffset += imageHeader[1];\n\n    if (imageOffset === fileLength) {\n      return imageSize;\n    }\n\n    const result = {\n      height: imageSize.height,\n      images: [imageSize],\n      width: imageSize.width\n    };\n\n    while (imageOffset < fileLength && imageOffset < bufferLength) {\n      imageHeader = readImageHeader(buffer, imageOffset);\n      imageSize = getImageSize(imageHeader[0]);\n      imageOffset += imageHeader[1];\n      result.images.push(imageSize);\n    }\n\n    return result;\n  }\n\n};","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/node_modules/image-size/dist/types/icns.js"],"names":["Object","defineProperty","exports","value","SIZE_HEADER","FILE_LENGTH_OFFSET","ENTRY_LENGTH_OFFSET","ICON_TYPE_SIZE","ICON","icm4","icm8","ics4","ics8","is32","s8mk","icp4","icl4","icl8","il32","l8mk","icp5","ic11","ich4","ich8","ih32","h8mk","icp6","ic12","it32","t8mk","ic07","ic08","ic13","ic09","ic14","ic10","readImageHeader","buffer","imageOffset","imageLengthOffset","toString","readUInt32BE","getImageSize","type","size","width","height","ICNS","validate","calculate","bufferLength","length","fileLength","imageHeader","imageSize","result","images","push"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * ICNS Header\n *\n * | Offset | Size | Purpose                                                |\n * | 0\t    | 4    | Magic literal, must be \"icns\" (0x69, 0x63, 0x6e, 0x73) |\n * | 4      | 4    | Length of file, in bytes, msb first.                   |\n *\n */\nconst SIZE_HEADER = 4 + 4; // 8\nconst FILE_LENGTH_OFFSET = 4; // MSB => BIG ENDIAN\n/**\n * Image Entry\n *\n * | Offset | Size | Purpose                                                          |\n * | 0\t    | 4    | Icon type, see OSType below.                                     |\n * | 4      | 4    | Length of data, in bytes (including type and length), msb first. |\n * | 8      | n    | Icon data                                                        |\n */\nconst ENTRY_LENGTH_OFFSET = 4; // MSB => BIG ENDIAN\n/* tslint:disable:object-literal-sort-keys */\nconst ICON_TYPE_SIZE = {\n    ICON: 32,\n    'ICN#': 32,\n    // m => 16 x 16\n    'icm#': 16,\n    icm4: 16,\n    icm8: 16,\n    // s => 16 x 16\n    'ics#': 16,\n    ics4: 16,\n    ics8: 16,\n    is32: 16,\n    s8mk: 16,\n    icp4: 16,\n    // l => 32 x 32\n    icl4: 32,\n    icl8: 32,\n    il32: 32,\n    l8mk: 32,\n    icp5: 32,\n    ic11: 32,\n    // h => 48 x 48\n    ich4: 48,\n    ich8: 48,\n    ih32: 48,\n    h8mk: 48,\n    // . => 64 x 64\n    icp6: 64,\n    ic12: 32,\n    // t => 128 x 128\n    it32: 128,\n    t8mk: 128,\n    ic07: 128,\n    // . => 256 x 256\n    ic08: 256,\n    ic13: 256,\n    // . => 512 x 512\n    ic09: 512,\n    ic14: 512,\n    // . => 1024 x 1024\n    ic10: 1024,\n};\n/* tslint:enable:object-literal-sort-keys */\nfunction readImageHeader(buffer, imageOffset) {\n    const imageLengthOffset = imageOffset + ENTRY_LENGTH_OFFSET;\n    return [\n        buffer.toString('ascii', imageOffset, imageLengthOffset),\n        buffer.readUInt32BE(imageLengthOffset)\n    ];\n}\nfunction getImageSize(type) {\n    const size = ICON_TYPE_SIZE[type];\n    return { width: size, height: size, type };\n}\nexports.ICNS = {\n    validate(buffer) {\n        return ('icns' === buffer.toString('ascii', 0, 4));\n    },\n    calculate(buffer) {\n        const bufferLength = buffer.length;\n        const fileLength = buffer.readUInt32BE(FILE_LENGTH_OFFSET);\n        let imageOffset = SIZE_HEADER;\n        let imageHeader = readImageHeader(buffer, imageOffset);\n        let imageSize = getImageSize(imageHeader[0]);\n        imageOffset += imageHeader[1];\n        if (imageOffset === fileLength) {\n            return imageSize;\n        }\n        const result = {\n            height: imageSize.height,\n            images: [imageSize],\n            width: imageSize.width\n        };\n        while (imageOffset < fileLength && imageOffset < bufferLength) {\n            imageHeader = readImageHeader(buffer, imageOffset);\n            imageSize = getImageSize(imageHeader[0]);\n            imageOffset += imageHeader[1];\n            result.images.push(imageSize);\n        }\n        return result;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}