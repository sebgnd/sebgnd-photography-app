{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\parallax\\\\Parallax.tsx\";\nimport React, { Component } from 'react';\nimport { ParallaxContainer } from './parallax.style';\n\nclass Parallax extends Component {\n  constructor(props) {\n    super(props);\n    this.parallaxElemRef = void 0;\n    this.throttleTime = void 0;\n    this.topOffset = void 0;\n    this.topOffset = 0;\n    this.parallaxElemRef = React.createRef();\n    this.throttleTime = 5;\n    this.isElementVisible = this.isElementVisible.bind(this);\n    this.updatePosition = this.updatePosition.bind(this);\n    this.getTopOffset = this.getTopOffset.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.addEventListener = this.addEventListener.bind(this);\n    this.removeEventListener = this.removeEventListener.bind(this);\n    this.state = {\n      backgroundPositionY: \"\"\n    };\n  }\n\n  isElementVisible() {\n    if (this.parallaxElemRef && this.parallaxElemRef.current) {\n      const position = this.parallaxElemRef.current.getBoundingClientRect();\n\n      if (position.top < window.innerHeight && position.bottom >= 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  updatePosition() {\n    if (!this.isElementVisible()) {\n      return;\n    }\n\n    const bottomPageOffset = window.scrollY + window.innerHeight;\n    const offset = bottomPageOffset - this.parallaxElemRef.current.offsetTop;\n    const newTop = this.topOffset - offset * this.props.speed;\n    this.setState({\n      backgroundPositionY: `${newTop}px`\n    });\n  }\n\n  getTopOffset() {\n    return this.parallaxElemRef.current.clientHeight * this.props.speed;\n  }\n\n  handleScroll() {\n    this.updatePosition();\n  }\n\n  handleResize() {\n    this.topOffset = this.getTopOffset();\n    this.updatePosition();\n  }\n\n  addEventListener() {\n    window.addEventListener('scroll', this.handleScroll);\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  removeEventListener() {\n    window.removeEventListener('scroll', this.handleScroll);\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  componentDidMount() {\n    this.topOffset = this.getTopOffset();\n    this.addEventListener();\n  }\n\n  componentWillUnmount() {\n    this.removeEventListener();\n  }\n\n  render() {\n    const {\n      img\n    } = this.props;\n    return React.createElement(ParallaxContainer, {\n      ref: this.parallaxElemRef,\n      style: { ...this.state\n      },\n      backgroundImage: img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Parallax;","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/parallax/Parallax.tsx"],"names":["React","Component","ParallaxContainer","Parallax","constructor","props","parallaxElemRef","throttleTime","topOffset","createRef","isElementVisible","bind","updatePosition","getTopOffset","handleResize","handleScroll","addEventListener","removeEventListener","state","backgroundPositionY","current","position","getBoundingClientRect","top","window","innerHeight","bottom","bottomPageOffset","scrollY","offset","offsetTop","newTop","speed","setState","clientHeight","componentDidMount","componentWillUnmount","render","img"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useRef, useState, RefObject } from 'react';\r\nimport { ParallaxContainer } from './parallax.style';\r\nimport { throttle } from 'lodash';\r\n\r\ninterface ParallaxProp {\r\n    img: string;\r\n    speed: number;\r\n}\r\n\r\ninterface ParallaxState {\r\n    backgroundPositionY: string;\r\n}\r\n\r\nclass Parallax extends Component<ParallaxProp, ParallaxState> {\r\n    private parallaxElemRef: RefObject<HTMLDivElement>;\r\n    private throttleTime: number;\r\n    private topOffset: number;\r\n\r\n    constructor(props: ParallaxProp) {\r\n        super(props);\r\n\r\n        this.topOffset = 0;\r\n        this.parallaxElemRef = React.createRef();\r\n        this.throttleTime = 5;\r\n\r\n        this.isElementVisible = this.isElementVisible.bind(this);\r\n        this.updatePosition = this.updatePosition.bind(this);\r\n        this.getTopOffset = this.getTopOffset.bind(this);\r\n        this.handleResize = this.handleResize.bind(this);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n        this.addEventListener = this.addEventListener.bind(this);\r\n        this.removeEventListener = this.removeEventListener.bind(this);\r\n\r\n        this.state = {\r\n            backgroundPositionY: \"\"\r\n        }\r\n    }\r\n\r\n    isElementVisible() {\r\n        if (this.parallaxElemRef && this.parallaxElemRef.current) {\r\n            const position: DOMRect = this.parallaxElemRef.current.getBoundingClientRect();\r\n            if (position.top < window.innerHeight && position.bottom >= 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updatePosition() {\r\n        if (!this.isElementVisible()) {\r\n            return;\r\n        }\r\n        const bottomPageOffset = window.scrollY + window.innerHeight;\r\n        const offset = bottomPageOffset - this.parallaxElemRef.current!.offsetTop;\r\n        const newTop = this.topOffset - offset * this.props.speed;\r\n        this.setState({ backgroundPositionY: `${newTop}px` });\r\n    }\r\n\r\n    getTopOffset() {\r\n        return this.parallaxElemRef.current!.clientHeight * this.props.speed;\r\n    }\r\n\r\n    handleScroll() {\r\n        this.updatePosition();\r\n    }\r\n\r\n    handleResize() {\r\n        this.topOffset = this.getTopOffset();\r\n        this.updatePosition();\r\n    }\r\n\r\n    addEventListener() {\r\n        window.addEventListener('scroll', this.handleScroll);\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    removeEventListener() {\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.topOffset = this.getTopOffset();\r\n        this.addEventListener();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.removeEventListener();\r\n    }\r\n\r\n    render() {\r\n        const { img } = this.props;\r\n        return (\r\n            <ParallaxContainer ref={this.parallaxElemRef} style={{...this.state}} backgroundImage={img} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Parallax;"]},"metadata":{},"sourceType":"module"}