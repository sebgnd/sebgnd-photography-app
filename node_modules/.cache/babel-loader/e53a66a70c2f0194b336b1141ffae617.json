{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\WEB\\\\sebgnd-photography\\\\front-end\\\\src\\\\components\\\\_containers\\\\Gallery\\\\SingleGallery.tsx\";\nimport React, { Component } from 'react';\nimport ImageList from '../../ImageList/ImageList';\nimport Image from '../../../helper/Image';\nimport Gallery from '../../../helper/Gallery';\nconst placeHolderImage = new Image(1, 'test', new Date());\nconst placeholderGallery = new Gallery('test', 'Test', placeHolderImage);\n\nclass SingleGallery extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gallery: new Gallery(),\n      images: [],\n      error: false,\n      loading: true\n    };\n  }\n\n  fetchImages() {\n    fetch(`http://localhost:8000/images/gallery/${this.props.match.params.galleryId}`).then(res => {\n      if (res.status !== 200) {\n        this.setState({\n          error: true,\n          loading: false\n        });\n        return;\n      }\n\n      return res.json();\n    }).then(result => {\n      const images = [];\n      let gallery = new Gallery();\n\n      for (let i = 0; i < result.length; i++) {\n        if (!gallery) {\n          gallery = new Gallery(result[i].gallery.id, result[i].gallery.displayName);\n        }\n\n        images.push(new Image(result[i].id, result[i].gallery.id, new Date(result[i].uploadDate)));\n      }\n\n      this.setState({\n        loading: false,\n        images,\n        gallery\n      });\n    }).catch(err => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.fetchImages();\n  }\n\n  render() {\n    return React.createElement(ImageList, {\n      images: this.state.images,\n      gallery: this.state.gallery,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default SingleGallery;","map":{"version":3,"sources":["E:/PROJECT/WEB/sebgnd-photography/front-end/src/components/_containers/Gallery/SingleGallery.tsx"],"names":["React","Component","ImageList","Image","Gallery","placeHolderImage","Date","placeholderGallery","SingleGallery","state","gallery","images","error","loading","fetchImages","fetch","props","match","params","galleryId","then","res","status","setState","json","result","i","length","id","displayName","push","uploadDate","catch","err","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,SAAP,MAAsB,2BAAtB;AAEA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,MAAMC,gBAAgB,GAAG,IAAIF,KAAJ,CAAU,CAAV,EAAa,MAAb,EAAqB,IAAIG,IAAJ,EAArB,CAAzB;AACA,MAAMC,kBAAkB,GAAG,IAAIH,OAAJ,CAAY,MAAZ,EAAoB,MAApB,EAA4BC,gBAA5B,CAA3B;;AAaA,MAAMG,aAAN,SAA4BP,SAA5B,CAA4F;AAAA;AAAA;AAAA,SACxFQ,KADwF,GAChF;AACJC,MAAAA,OAAO,EAAE,IAAIN,OAAJ,EADL;AAEJO,MAAAA,MAAM,EAAE,EAFJ;AAGJC,MAAAA,KAAK,EAAE,KAHH;AAIJC,MAAAA,OAAO,EAAE;AAJL,KADgF;AAAA;;AAQxFC,EAAAA,WAAW,GAAG;AACVC,IAAAA,KAAK,CAAE,wCAAuC,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,SAAU,EAA3E,CAAL,CACCC,IADD,CACMC,GAAG,IAAI;AACT,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAKC,QAAL,CAAc;AAAEX,UAAAA,KAAK,EAAE,IAAT;AAAeC,UAAAA,OAAO,EAAE;AAAxB,SAAd;AACA;AACH;;AACD,aAAOQ,GAAG,CAACG,IAAJ,EAAP;AACH,KAPD,EAQCJ,IARD,CAQMK,MAAM,IAAI;AACZ,YAAMd,MAAe,GAAG,EAAxB;AACA,UAAID,OAAgB,GAAG,IAAIN,OAAJ,EAAvB;;AACA,WAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAACE,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,YAAI,CAAChB,OAAL,EAAc;AACVA,UAAAA,OAAO,GAAG,IAAIN,OAAJ,CAAYqB,MAAM,CAACC,CAAD,CAAN,CAAUhB,OAAV,CAAkBkB,EAA9B,EAAkCH,MAAM,CAACC,CAAD,CAAN,CAAUhB,OAAV,CAAkBmB,WAApD,CAAV;AACH;;AACDlB,QAAAA,MAAM,CAACmB,IAAP,CAAY,IAAI3B,KAAJ,CAAUsB,MAAM,CAACC,CAAD,CAAN,CAAUE,EAApB,EAAwBH,MAAM,CAACC,CAAD,CAAN,CAAUhB,OAAV,CAAkBkB,EAA1C,EAA8C,IAAItB,IAAJ,CAASmB,MAAM,CAACC,CAAD,CAAN,CAAUK,UAAnB,CAA9C,CAAZ;AACH;;AACD,WAAKR,QAAL,CAAc;AAAEV,QAAAA,OAAO,EAAE,KAAX;AAAkBF,QAAAA,MAAlB;AAA0BD,QAAAA;AAA1B,OAAd;AACH,KAlBD,EAmBCsB,KAnBD,CAmBOC,GAAG,IAAI;AACV,WAAKV,QAAL,CAAc;AAAEX,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,OAAO,EAAE;AAAxB,OAAd;AACH,KArBD;AAsBH;;AAEDqB,EAAAA,iBAAiB,GAAG;AAChB,SAAKpB,WAAL;AACH;;AAEDqB,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAK1B,KAAL,CAAWE,MAA9B;AAAsC,MAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAzCuF;;AA4C5F,eAAeF,aAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport ImageList from '../../ImageList/ImageList';\r\n\r\nimport Image from '../../../helper/Image';\r\nimport Gallery from '../../../helper/Gallery';\r\n\r\nconst placeHolderImage = new Image(1, 'test', new Date());\r\nconst placeholderGallery = new Gallery('test', 'Test', placeHolderImage);\r\n\r\ninterface RouteParams {\r\n    galleryId: string;\r\n}\r\n\r\ninterface SingleGalleryState {\r\n    gallery: Gallery;\r\n    images: Image[];\r\n    error: boolean,\r\n    loading: boolean\r\n}\r\n\r\nclass SingleGallery extends Component<RouteComponentProps<RouteParams>, SingleGalleryState> {\r\n    state = {  \r\n        gallery: new Gallery(),\r\n        images: [],\r\n        error: false,\r\n        loading: true\r\n    }\r\n\r\n    fetchImages() {\r\n        fetch(`http://localhost:8000/images/gallery/${this.props.match.params.galleryId}`)\r\n        .then(res => {\r\n            if (res.status !== 200) {\r\n                this.setState({ error: true, loading: false });\r\n                return;\r\n            }\r\n            return res.json();\r\n        })\r\n        .then(result => {\r\n            const images: Image[] = [];\r\n            let gallery: Gallery = new Gallery();\r\n            for (let i = 0; i < result.length; i++) {\r\n                if (!gallery) {\r\n                    gallery = new Gallery(result[i].gallery.id, result[i].gallery.displayName);\r\n                }\r\n                images.push(new Image(result[i].id, result[i].gallery.id, new Date(result[i].uploadDate)));\r\n            }\r\n            this.setState({ loading: false, images, gallery });\r\n        })\r\n        .catch(err => {\r\n            this.setState({ error: true, loading: false });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchImages();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ImageList images={this.state.images} gallery={this.state.gallery}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SingleGallery;"]},"metadata":{},"sourceType":"module"}